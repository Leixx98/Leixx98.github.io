{"meta":{"title":"Leixx","subtitle":null,"description":null,"author":"lei xx","url":"http://yoursite.com"},"pages":[{"title":"about","date":"2018-03-27T03:13:42.000Z","updated":"2018-03-27T03:13:43.824Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"vivadoIP核DDS使用及注意","slug":"vivadoIP核DDS使用及注意","date":"2020-02-19T02:38:24.000Z","updated":"2020-02-19T03:26:39.449Z","comments":true,"path":"2020/02/19/vivadoIP核DDS使用及注意/","link":"","permalink":"http://yoursite.com/2020/02/19/vivadoIP核DDS使用及注意/","excerpt":"","text":"vivadoIP核DDS使用及注意vivado当前版本2018.3vivado提供了DDS IP核可以输出正余弦波形，配置方法如下 打开VIVADO，选择IP Catalog 输入DDS，找到DDS IP核，双击打开 打开IP核配置，parameter Selection选择System Parameters设置System Parameters参数：Spurious Free Dynamic Range的设置，这个参数与输出数据的宽度相关。我需要位宽为10位的输出，因此Spurious Free Dynamic Range设置为10*6=60Frequency Resolution的设置，这个参数与输出相位数据的宽度相关，如果想要得到16bit的宽度，channels为1，系统输入时钟为100MHzFrequency Resolution = 100000000/2^16 = 1525.8789025设置如图： 设置Phase Increment Programmability和Phase offset programmability为固定模式，输出为正弦波 设置输出频率10M 查看配置好的DDS参数 编写代码和TESTBENCH，进行仿真顶层程序12345678910111213141516171819202122232425262728293031`timescale 1ns / 1psmodule top( input clk_100m, input rst_n, ///////////DAC0///////////// output [9:0]DAC0_D, output DAC0_CLK, output DAC0_PD ); wire [15:0]dac_data;wire phase_tvalid;wire [15:0]phase_data;wire dds_valid;dac dac_ini( .clk_100m(clk_100m), .dac_data(dac_data), .DAC0_D(DAC0_D), .DAC0_CLK(DAC0_CLK), .DAC0_PD(DAC0_PD));dds_compiler_0 dds_compiler_0_ini( .aclk(clk_100m), .m_axis_data_tvalid(dds_valid), .m_axis_phase_tvalid(phase_tvalid), .m_axis_phase_tdata(phase_tdata), .m_axis_data_tdata(dac_data));endmodule testbench12345678910111213141516171819202122232425262728293031`timescale 1ns / 1psmodule top_tb( );reg clk_100m;reg rst_n;wire [9:0]DAC0_D;wire DAC0_CLK;wire DAC0_PD;initialbegin clk_100m = 1&apos;b0; rst_n = 1&apos;b1; #10 rst_n = 1&apos;b0; #500 rst_n = 1&apos;b1;endalways #5 clk_100m = ~clk_100m;top top_ini( .clk_100m(clk_100m), .rst_n(rst_n), .DAC0_D(DAC0_D), .DAC0_CLK(DAC0_CLK), .DAC0_PD(DAC0_PD));endmodule 仿真时注意DDSIP核输出的是有符号数，因此需要将DDS输出的数据设置成有符号数，即将仿真数据radix为signed decimal 注意：因为DDSIP核输出的是有符号数，因此虽然我们设置的是10位的位宽，但输出数据共有16位，因为需要高位来作补码。在使用时只用低10位即可。","categories":[{"name":"work","slug":"work","permalink":"http://yoursite.com/categories/work/"}],"tags":[{"name":"work","slug":"work","permalink":"http://yoursite.com/tags/work/"}]},{"title":"vivado三种常用IP核的调用","slug":"vivado三种常用IP核的调用","date":"2020-02-17T08:54:45.000Z","updated":"2020-02-17T13:53:49.279Z","comments":true,"path":"2020/02/17/vivado三种常用IP核的调用/","link":"","permalink":"http://yoursite.com/2020/02/17/vivado三种常用IP核的调用/","excerpt":"","text":"vivado三种常用IP核的调用当前使用版本为vivado 2018.3vivado的IP核，IP核（IP Core）：Vivado中有很多IP核可以直接使用，例如数学运算（乘法器、除法器、浮点运算器等）、信号处理（FFT、DFT、DDS等）。IP核类似编程中的函数库（例如C语言中的printf()函数），可以直接调用，非常方便，大大加快了开发速度。 今天介绍的是vivado的三种常用IP核：时钟倍频（Clocking Wizard），实时仿真（ILA）,ROM调用（Block Memory）。 Clocking Wizard该IP核可以将输入的时钟信号进行倍频，倍数可以大于1，也可以小于1，非常方便。1打开vivado 找到IP Catelog 1在右侧输入栏中输入clk，找到Clocking Wizard 1双击该项目打开，根据开发板上晶振频率进行输入时钟配置 1配置需要输出的倍频频率 1在最下方可选择IP核需要的引脚，我都没用到，因此全取消了（之前有遇到选择reset和lock引脚后IP核不能使用的情况，原因还未弄清楚）。 1点击OK，并点击Generate，完成Clocking Wizard的配置 1在代码中对IP核进行调用 1编写TESTBENCH，仿真结果如下 ILAILA是用于实时仿真的IP核，在你将bit文件烧入芯片后，可在ILA核中看到你想观察的图像和数据。1打开IP Catelog，输入ILA 1双击打开项目，配置需要观察的端口数，采样的深度 1配置观察端口的位数 1点击OK，和Generate完成IP核配置 1在代码中调用IP核 1完成工程综合后，下载文件，点击运行和循环，开始观察 Block Memory该IP核调用片内ROM，可以用来储正弦波，三角波等波形。该IP核引用文件的格式为.coe，因此我们需要先使用Matlab生成一个.coe文件。 打开matlab，新建一个.m文件，输入以下代码生成一个位宽10位，深度1024的正弦波 123456789width=10; %rom的位宽depth=1024; %rom的深度x=linspace(0,2*pi,depth); %在一个周期内产生1024个采样点y_sin=cos(x); %生成余弦数据y_sin=round(y_sin*(2^(width-1)-1))+2^(width-1)-1; %将余弦数据全部转换为整数fid=fopen(&apos;C:\\Users\\Leixx\\Desktop\\sin_coe.coe&apos;,&apos;w&apos;); %创建.coe文件fprintf(fid,&apos;%d,\\n&apos;,y_sin); %向.coe文件中写入数据fclose(fid); %关闭.coe文件 生成文件之后，用notepad++(或UltraEdit)打开，你会看见已经生成好的1024个数据，这时需要在文件的最开始添加下面两句：12memory_initialization_radix=10;memory_initialization_vector = radix表示是十进制显示。之后，在文件的最末尾，将最后一个数据后面的逗号改成分号，点击保存。1打开vivado，点击IP Catalog，输入block 1双击打开项目，选择Single port ROM 1配置要存入的数据位宽和数据深度，我之前生成的是位宽10位，深度1024的数据 1选择Always Enanbled，让IP核始终处于工作状态 1将之前生成好的文件载入IP核 1点击OK和Generate，完成IP核配置 1在代码中调用IP核，我这里DAC是低位在前 1编写好Testbench后，可以在仿真中看到正弦波，我这里因为低位在前，所以波形杂乱。 以上，便是vivado三种常用IP核的调用。","categories":[{"name":"work","slug":"work","permalink":"http://yoursite.com/categories/work/"}],"tags":[{"name":"work","slug":"work","permalink":"http://yoursite.com/tags/work/"}]},{"title":"简爱","slug":"简爱","date":"2020-02-14T07:05:09.000Z","updated":"2020-02-14T07:46:12.461Z","comments":true,"path":"2020/02/14/简爱/","link":"","permalink":"http://yoursite.com/2020/02/14/简爱/","excerpt":"","text":"简爱You think I’m poor and plain, there is no feelings? I swear to you: if god gifted me beauty and wealth, I will let you to leave me, as I have to leave you. God no such arrangements. But our spirit is equal. As I walked through the grave, you equal standing in front of god. 你以为我贫穷、相貌平平就没有感情吗？我向你起誓：如果上帝赐予我财富和美貌，我会让你难于离开我，就像我现在难于离开你一样。上帝没有这样安排。但我们的精神是平等的。就如同你我走过坟墓，平等的站在上帝面前。 Life is too short, should not be used to bear grudges. Living life, who will have mistakes, but we will die soon. Our SINS will be disappeared with our bodies, leaving only the spark of spirit. This is what I never wanted to revenge, and never consider life unfair. Quiet life, I am just waiting for the end of the coming. 生命太短暂了，不应该用来记恨。人生在世，谁都会有错误，但我们很快会死去。我们的罪过将会随我们的身体一起消失，只留下精神的火花。这就是我从来不想报复，从来不认为生活不公平的原因。我平静的生活，等待末日的降临。 If you can’t avoid, you have to go to bear. Can’t stand destined to endure things in life, is weak and foolish. 假如你避免不了，就得去忍受。不能忍受生命中注定要忍受的事情，就是软弱和愚蠢的表现。 I can’t control my eyes, could not help but want to go to see him, like a thirsty man knowing that toxic but also drink water. I originally had no intention of going out to love him, I also tried to put out the bud of love, but when I saw him again, again love the bottom of my heart. 我无法控制自己的眼睛，忍不住要去看他，就像口干舌燥的人明知水里有毒却还要喝一样。我本来无意去爱他，我也曾努力的掐掉爱的萌芽，但当我又见到他时，心底的爱又复活了。","categories":[{"name":"life","slug":"life","permalink":"http://yoursite.com/categories/life/"}],"tags":[{"name":"life","slug":"life","permalink":"http://yoursite.com/tags/life/"}]},{"title":"重装后安装hexo","slug":"重装后安装hexo","date":"2020-02-07T00:51:42.000Z","updated":"2020-02-07T02:06:53.068Z","comments":true,"path":"2020/02/07/重装后安装hexo/","link":"","permalink":"http://yoursite.com/2020/02/07/重装后安装hexo/","excerpt":"","text":"重装后如何安装hexo对于很多电脑用户，定时重装电脑有助于延长电脑使用寿命，避免电脑卡顿，重装后如何重新链接hexo和github，教程如下： 1.不要删除你之前的hexo文档在重装时，请将原先的hexo文档进行备份，不要删除。 2.重新链接github（1）安装git直接到git官网下载纯净安装包即可，安装默认下一步即可。 （2）配置个人信息找到之前的github文件夹，或者新建一个，右键点击Git Bash Here依次输入以下命令1git config --global user.name &quot;xxxxxx&quot; 1git config --global user.email &quot;xxxxxx&quot; 1ssh-keygen -t rsa -C &quot;xxxxxxxx(邮箱)&quot; （3）添加公钥 在个人用户文件夹（C盘里的用户里）找到.ssh文件夹，将里面id_rsa.pub的内容复制。 打开github官网登录，并在setting中选择SSH and GPG keys，点击点击Add SSH Key，这里有两个栏目。title是公钥名称，key是内容。 随便起个名称后，将之前复制的内容贴到key这一栏。或者用git通过命令cat ~/.ssh/id_rsa.pub将公钥内容打印出来。 成功之后，创建用户的邮箱将会收到一封提示“密钥添加完成的邮件”（4）安装nodejs 到node官网上下载nodejs，安装时默认下一步即可。 打开git，输入npm install cnpm -g --registry=https://registry.npm.taobao.org 安装的时候 用cpm 代替npm 输入cnpm install hexo-cli -g 安装hexo。（5）删除原博客部分文件打开原来的博客文件夹,只需保留_config.yml，theme/，source/，scaffolds/，package.json，.gitignore 这些项目，删除其他的文件。（6）在本文件夹下运行git在原先的文件夹右键点击git bash，输入cnpm install安装npm（7）安装部署插件输入npm install hexo-deployer-git --save部署插件（8）运行输入hexo g 和hexo d 进行测试。","categories":[{"name":"work","slug":"work","permalink":"http://yoursite.com/categories/work/"}],"tags":[{"name":"work","slug":"work","permalink":"http://yoursite.com/tags/work/"}]},{"title":"近日随笔","slug":"近日随笔","date":"2020-02-06T12:27:16.000Z","updated":"2020-02-06T13:29:07.760Z","comments":true,"path":"2020/02/06/近日随笔/","link":"","permalink":"http://yoursite.com/2020/02/06/近日随笔/","excerpt":"","text":"平淡若没有这场疫情，我的生活大概也不会有太多变化吧。 生活依旧如车轮滚滚地向前着，距离1月20日钟南山院士在电视上宣布新型冠状病毒具有显著的人传人特性已经过去了18天，疫情的扩散超出了所有人的预见，2万余的确诊人数，2万余的疑似人数，并且增加的势头并没有明显的减缓，未来的十数天甚至数月，人们注定要在恐惧与不安中度过。 而对于我有什么影响呢？准确来说——”从主动呆家变成了被动呆家“。 我也不甚清楚自己在何时成为了一名光荣的”宅男“。只知道从某个时刻开始，和朋友的联系渐渐没有了——网络上的联系，取而代之的是在家中以千奇百怪的姿势玩弄着手机。 我平时玩手机干嘛呢？我思索了宅男喜爱的几个项目：游戏、看剧、看番、小说、漫画。等等！我好像都有涉猎！那看来我的确已经晋升为名副其实的宅男了。 但我一直有个很大的毛病，注意力难以集中。做一件事总是不能持续太久，尤其是一个人做的时候。游戏打两把，便觉索然无味，我也无法理解这样的事，明明是很有趣的事，不是吗？ 每天的转路是我最爱的事，慢慢地走，慢慢地看，慢慢地听，竟成为最享受的事。在疫情的笼罩下，河堤旁的人寥寥无几，天与地仿佛只我一人，心中顿生悠然之情。 每天的事可以简单概况成三个词：吃饭、睡觉、上厕所。简单地循环，简单地快乐。心情也无甚波动，悠哉乐哉。 人心鲁迅先生曾说：”我向来是不惮以最坏的恶意来揣测国人的“。 前些日子，武汉红十字会的老总们狠狠地在全国人民面前亮了相。克扣物资，管理混乱，浑水摸鱼，在救灾物资中捞油水。这些举动彻底引爆了人们在疫情下本就烦躁愤怒的心情。人们口诛笔伐，控诉着红十字会的行为。加上湖北政府在疫情爆发前一味隐瞒推诿的举措，人们不禁怀疑湖北的官场到底是怎样的一个藏污纳垢之地。 一边是自制防护物资的白衣天使，一边是仓库里迟迟不发的救灾物资。”前方吃紧，后方紧吃“在和平年代也栩栩如生地上演了。人血馒头真的能吃的下去吗？这不是在吃人吗？！ 荀子曰：“人之初，性本恶”。我也越发地相信这一点了。世上的诱惑千千万，无非名、利、权。从三者出发，又衍变出千千万万种交易。但君子爱财，取之有道，如此发财，只怕花起来会不会有些坐立不安呢？ 网络的日益发达使民众舆论监督的力量越来越强大了。尽管人们对微博多有诟病，但不得不承认，在舆论监督的过程中，微博起着不可或缺的作用。对于这样的平台，我想应该是欢迎的。 有极致的恶便有天使般的善。面对灾难，无数的人前仆后继，奔向了一线。他们是丈夫，是妻子，是父亲，是母亲，是儿子，是女儿。但现在，他们有一个共同的名字：中国人。 令人最为动容的无疑是武汉金银潭医院的院长了，身患绝症却依然奋战在一线，这样巨大的奉献精神，无论何时都令人肃然起敬。","categories":[{"name":"life","slug":"life","permalink":"http://yoursite.com/categories/life/"}],"tags":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/tags/Life/"}]},{"title":"2019华为实习面经","slug":"2019华为实习面经","date":"2019-04-10T03:38:38.000Z","updated":"2019-05-30T13:44:29.099Z","comments":true,"path":"2019/04/10/2019华为实习面经/","link":"","permalink":"http://yoursite.com/2019/04/10/2019华为实习面经/","excerpt":"","text":"2019华为实习面经第一阶段——简历制作一份好的简历至关重要，我在知乎上和各类博客上看了很多的简历制作的指导。我个人是使用的超级简历这个网站制作的简历。简历模板简约大方，分类详细，制作起来比较简单。我个人不是很推荐五颜六色的简历，我觉得就经典的黑白色，分类清楚就行。简历上需要包括的自己的姓名，联系方式，学校，专业，绩点，项目经历，实习经历，社团和活动经历，语言和技能等。项目经历写的最好详细一点，如果学校和绩点较好，也可以在简历上强调一下。建议简历上少用空话套话，尽量多用数据说话。 第二阶段——简历投递我是在2月底就已经开始在了解实习生招聘相关宣传了，在学校竞赛群里看到了在华为工作的学姐发布的宣传海报，于是我加了海报上的HR的微信联系方式。HR让我将简历投递到他的邮箱后就让我等消息了。在3月6号我收到了HR给我发的邮件，我按照邮件内容指导完成了简历注册，和职位申请。我申请的是数据通信产品线的硬件技术工程师职位。特别强调一下，华为的简历注册也有很多需要填写的，也是尽量详细丰富一点，简历筛选也是会刷人的。 第三阶段——宣讲会3月14日我收到了华为宣讲会邀请的短信，在3月19日举行了华为实习招聘暨精英挑战赛宣讲会。建议尽量早点去，因为人真的很多，我去晚了一点就没有位置了，得一直站着。宣讲会放了华为的宣传视频，讲了研发岗实习招聘的流程：简历投递-上机考试-综合测试-业务面试-综合面试，非研发岗的面试是：简历投递-综合测评-集体面试-专业面试-综合面试-语言测试。以及大家关心的一些问题，比如薪资待遇，华为实习生待遇是一个月6K。比如工作地点，往往都是就近选择工作地。比如培训体系，会有一位导师一对一带着你。 第四阶段——上机笔试3月24日我收到了上机笔试的短信，同时邮箱收到了上机测试的链接。上机考试是一个牛客网的链接。上机考试是在3月27日晚上的19:00-20:10共60分钟。华为的上机笔试分软件岗和硬件岗。软件岗的笔试是三道编程题，第一道100分，第二道200分，第三道300分。至少要求100分。硬件岗的笔试是40道单选题，1道题2分，5道多选题，1道题4分，至少要求60分。硬件岗的选择题是有很多的学科基础问题，包括模电，数电，DSP，微机等，但也包括其他的学科，我就遇到了材料学的相关问题。软件岗的编程题听说今年有点难。 第五阶段——岗位介绍3月28日举行了华为的实习岗位介绍会，来了运营商BG和数据通信产品线的前辈介绍了岗位。 第六阶段——综合测试这个综合测试呢，实际上呢就是职场性格测试，会全面调查你的性格和特点。我是在29号收到了综合测试的链接。答题的时候放松，但千万注意不要前后矛盾。比如你前面选择了我是乐观的人，后面又说我不怎么乐观，这肯定是不行的。要保持前后一致。 第七阶段——业务面试4月5日我收到了面试通知的短信，是预约到了4月9日的上午11点面试。我早上一大早起床，然后乘坐地铁去了华为南京研究所，坐车大概一个小时。我差不多9点过到的，在南门接待厅拿了通行证后，去面试楼签到。这里提一下，华为南京研究所的环境真的很好，绿荫环绕，还有一面平静的湖。签到的时候向工作人员展示了自己的身份证，学生证和面试的通知短信，去到等候区的时候已经有很多的同学在等候了。建议面试的同学可以的话就提前去，因为面试的人可能真的很多。我大概等到了11点半，没等到面试通知，结果等来了补测综合测试的通知。我综合测试应该是挂了！这边再说一下，综合测试还是严谨一点，前后不要矛盾。补测完综合测试已经快12点了，工作人员直接给我发放了餐券让我先去食堂吃午饭了。华为的食堂真的蛮大的，吃饭的人也很多，环境很不错。吃完饭回到休息区我还是接着等候，等到差不多两点的时候，收到了面试叫号的短信。 进入面试区，找到面试官后，建议礼貌一点，我是先鞠了个躬，然后双手把自己的简历递给了面试官。面试官是一位戴着黑框眼镜的大叔，人很和蔼。 问题(1)：你先做个自我介绍吧我提前准备好了一个一分多钟的自我介绍，然后很流利的就背了出来，但是语速也不是很快，尽量表达清楚。建议面试的时候一定要提前准备一个1~2分钟的自我介绍，一个好的自我介绍是一个成功的开始。不要临场发挥。 问题(2)：你的成绩怎么样我如实介绍了自己的成绩，自己成绩也是中等水平，自己把更多的精力放在比赛和社团上了。 问题(3)：你介绍一下你的这个项目吧我简历上写了四个项目，我顺势就给面试官介绍了第一个项目。我先画我们的系统框图，然后一个模块一个模块的给面试官介绍，面试官对这个项目还是很感兴趣，又问了一个问题。 问题(4)：哪些模块是你做的，哪些电路是你设计的我介绍说自己独立完成了所有的控制系统软件设计，然后设计了滤波器，同时帮自己的队友调试电路。面试官好像对于电路设计更加关注，他问我你主要是软件设计，电路设计比较少吗？我当时意识到面试官应该对电路设计更感兴趣，所以我介绍的重点还是放在电路模块上。我说我完成过电路设计的全部流程，包括使用AD软件画原理图，画PCB，送厂家打板，焊接调试。 问题(5)：你们这个系统完成的怎么样？是只有个原理框图吗？我当时听到这个问题其实楞了一下，面试官这是在质疑我的能力？我第一句就回答说我们完成了所有的系统功能并参加了测评，获得了校级一等奖。之后我又和面试官讲了我们这个系统实现的功能以及性能。 问题(6)：那你这第二个项目你介绍一下吧谈到第二个项目，我也是画了一个框图之后和面试官介绍，然后面试官也会指着框图中的一些模块问一些细节的问题。比如互感线圈的原理，功率放大器的作用等等，我都如实回答了。 问题(7)：你跟我讲一下你如何选择ADC的芯片呢我从ADC的一些功能上介绍了自己如何选择芯片，包括采样速率、采样通道，采样位数，通信协议等。然后我还补充了自己选择放大器芯片的参数，包括开环增益、共模抑制比、是否轨到轨、输入输出阻抗等。 问题(8)：你再介绍一下第三个项目吧我当时是真没想到项目还会挨个问，不过我都准备了，画了框图跟面试官详细介绍了起来。 问题(9)：我看你做的项目更多是嵌入式软件设计，那你到底是对软件设计还是电子更感兴趣呢之前面试官有提到这个岗位更多是电子设计，所以我毫不犹豫的答道自己是对电子更感兴趣的，之前做软件更多也是因为组队分方向后的需要 问题(10)：你了解Verilog吗我是知道的，但也是用过一两回，然后答道知道，有开发过FPGA，使用的是Quartas软件。 问题(11)：你上面讲的都是成功的项目，你有没有什么失败的项目给我讲一下失败的项目我还真是没怎么准备，但自己做失败的项目真的太多了。我跟面试官讲了自己大一那个暑假参加全国大学生电子设计大赛失败的经历。当时自己和队友绝大部分时间用来调试电路，而留给我自己写代码的时间很少，最后就只是出了一个信号，其他什么都没有。 问题(12)：你有没有从这个失败经历学到什么我其实自己也是一点点成长吧，然后主要就回答了事前准备的重要性。面试官也和我说你们当时应该分开行动，队友调试电路的时候，你可以写代码，这样两头行动。我对面试官的话非常赞同。 问题(13)：你们有没有遇到什么困难？是什么解决的这个问题是我提前准备好的，之前看很多前辈的面经都有问到这个问题。我就很流利的把自己准备的背给面试官了。 问题(14)：我看你大多都是做的软件设计，但我们这个岗位更多是电路设计，你是对哪个方向更感兴趣呢其实我选择这个岗位的时候，岗位要求上写的是偏嵌入式开发的，我也没想到面试官会这么说。但我想这应该是要我给个态度。所以我选择狠狠地把自己的过去否对了一遍。我跟面试官说，自己当时做软件设计更多是因为队伍分工的需要，我的队友是两位学长，他们更需要一个做单片机的队友。但其实我一直都对电路更感兴趣，我平时写的代码大多都是驱动芯片，实现控制，有些单调。我自己是有独立完成过电路设计和焊接调试的。 问题(15)：你有什么问题问我吗这个时候是一定要问的，显得你非常在意这个岗位。我问了面试官两个问题，一个是华为公司的上升途径，另一个是平时是团队如何协调工作的。 然后整个面试就结束了，我问了面试官是等会儿有综合面试吗？面试官说是的，你在等候区等候一下。听到这个消息我松了一口气，因为业务面试是会刷人的，如果你业务面试表现不佳，那么面试官会直接让你回去，不会给你综合面试的机会。 第八阶段——综合面试回到等候区，这个时候已经很多预约下午面试的同学过来了。我吃了点摆在桌子上的面包，这一点还是要赞一下，在休息区放了很多的零食牛奶和水给等候面试的同学。差不多过了20多分钟负责综合面试的工作人员就叫到我名字了，我还是挺吃惊的，没想到这么快。见到面试官，我还是先鞠了个躬然后双手把简历递给了面试官，面试官是个中年大叔，不过发量有点少而且花白所以显得人不是很精神。 问题(1)： 你先做个自我介绍吧我还是把之前的准备好的自我介绍背给了面试官听。 问题(2)：你考研吗这个是必问的问题，一般来说，企业更倾向于招不考研的同学，因为你要考研的话就等于企业跟你签的合同会作废。但这个问题还是应该如实回答。我回答说不考，然后解释了一下不考的原因。 问题(3)：你的成绩怎么样我正准备和面试官讲的时候，没想到面试官主动说：我看你成绩中等，应该是把更多的精力放在比赛和社团上了吧。我当时愣了一下，没想到面试官把我想说的给说了，不知道他是不是这套说辞已经听腻了。 问题(4)：你为什么想加入华为公司这个问题其实有很多个回答角度，但建议不要从薪水的角度。我回答说自己从小家庭给我灌输的理念就是只有拼搏和奋斗才能改变自己，我的价值观也是努力和奋斗，我认为我的观点和华为的企业文化是有相同之处的，华为之所以能达到现在的高度就是靠着一代又一代人不停歇的努力和奋斗，华为的文化吸引着我。大概就是这样的一些说法。 问题(5)：你是独生子女吗之前就听说综面会问到这个问题，没想到真问了。我回答说自己有个双胞胎弟弟在西安读书，面试官问哪个学校，我说西北工业大学。面试官说你们怎么不在一个学校呢？我当时那个汗啊，这不摆明了分数不一样嘛。 问题(6)：你是四川人，为什么会跑到南京来呢我说自己是想从四川走出来看看外面的世界，去更大的城市去开拓自己的见识等，然后面试官突然插了一句成都不也挺发达的嘛，一下把我憋住了，我说和一线城市比还是有差距。 问题(7)：你对华为公司有多少了解我首先说这几年华为最为人所知的就是手机以及其他的消费者业务，但我作为通信工程的学生，更了解华为在通信领域的分量，和思科和爱立信等通讯公司在各个方向的对抗，以及芯片领域华为取得的卓越成就。还有就是华为目前在5G领域更是处于领头羊的地位。反正就是一顿吹。 问题(8)：华为公司是比较辛苦的，你能接受吗肯定愿意啊，华为虽然累，加班多，压力大，但是工资高啊。其他公司你想多辛苦点挣钱还没有途径。 问题(9)：你有回四川工作的打算吗我把自己的打算跟面试官说了，自己实习可以在南京实习，但如果转正了，我希望能回成都工作。 问题(10)：你父母是做什么工作的这个就如实回答就好 问题(11)：你有什么要问我的吗我向面试官问了两个问题，一个是实习的日常工作安排，另一个就是结果通知大概是什么时候。面试官和我介绍了实习生的工作安排以及培训体系，然后说结果大概一周内出来。 然后面试就结束了，我跟面试官说了再见，就收拾东西离开了。 第九阶段——等候通知昨天面试的，我今天早上看了下华为招聘网站，状态已经变成通过面试，录用排序中。听在华为工作的学姐说应该是通过面试了，接下来就是等候通知了。 第十阶段——收到offer总算在5月23日收到了华为offer，距离面试已经过去了一个多月，自己的心也在这段时间不时地煎熬着。担心自己已经在筛选中被淘汰。如今尘埃已定，是时候开启新的未来！ 总结其实整个面试流程拖的蛮长的，在这个过程中人也是比较煎熬的。我这段时间常常就会莫名其妙的感觉到整个人很烦躁，就有一种整个人站在人生十字路口的感觉，非常的茫然，也有点恐惧。 回想整个过程，提前准备很重要。有两个关键点，一个是简历，一个好的简历就是成功的开始，简历一定要挑干货的写，避免空话套话，多列数据。然后就是尽量多写几个项目，因为面试真的就是问你项目，如果你没有项目的话，那可能就会问你基础学科知识，比如傅里叶变换等等。 如果你说没有项目怎么办？其实这也是本科生的困难，真的凑不出什么项目，那也没办法，如果可以的话还是考研较稳妥。我去面试的过程发现，80%都是研究生出来找实习的，本科生真的很少。 另一个就是提前准备，我在网上看了很多其他前辈写的面经，把一些可能问到的高频的问题整理出来然后提前写好回答背一背，这样的话可以在面试的时候自信很多，说话也会变得流利。前面几个问题回答得流利后面就会放松下来不会出现结巴这样的问题。而且临场发挥总归是不保险的事情。 以上","categories":[{"name":"work","slug":"work","permalink":"http://yoursite.com/categories/work/"}],"tags":[{"name":"work","slug":"work","permalink":"http://yoursite.com/tags/work/"},{"name":"life","slug":"life","permalink":"http://yoursite.com/tags/life/"}]},{"title":"零中频正交解调幅频特性测量原理","slug":"零中频正交解调幅频特性测试仪原理","date":"2019-03-08T06:20:38.000Z","updated":"2019-03-08T06:44:32.243Z","comments":true,"path":"2019/03/08/零中频正交解调幅频特性测试仪原理/","link":"","permalink":"http://yoursite.com/2019/03/08/零中频正交解调幅频特性测试仪原理/","excerpt":"","text":"零中频正交解调幅频特性测量一、频率特性因为电容和电感的存在，所以当激励源频率变化时，电路的感抗和容抗都将随频率变化，从而导致其工作频率跟随频率变化。幅频特性：幅度的比值A(ω)=Ao/Ai与频率ω的函数关系。相频特性：φ(ω)=φ₂-φ₁与频率ω的函数关系。 二、测量原理主要有两种：动态法和稳态法。动态法：对被测网络冲激响应h(t)进行傅里叶变换，得到被测网络的频域表达式，从而算出其频率特性的方法。稳态法：利用扫频技术检测被测网络在每个频率点的输出信号和输入信号的幅度比和相位差来确定其幅频和相频特性。 三、不同方案利弊分析1.二极管检波和平衡鉴相原理 (1).二极管检波原理如上图，检波由两部分构成：晶体二极管D（非线性器件）和RC低通滤波器。当检波器输入端信号Ui为零时，其各处电压均为零，检波二极管D处于截止状态。当检波器输入端信号Ui为Acosωt时，由于电容器的交流阻抗小，Ui基本上被加到二极管D的两端。当Ui达到正半周期峰值时，二极管D正向导通，这时电流i通过电容器的充电，由于电流很大，电容器上的电压在很短时间接近信号峰值。在该信号建立起来之后，随着Ui幅度减小，二极管D负极电压高于正极，此时二极管反向截止，电容器就会通过电阻R进行放电，由于放电常数τ=RC远大于Ui的周期，因此电容器上电压下降缓慢。当电容器上电压还没来得及下降时，第二个周期的Ui又超过了电容器上的电压而使二极管D导通，再次向电容器充电，使得电容器上电压迅速回到Ui峰值。经过不断重复，就得到了稳定的输出电压。因为二极管检波至少应包含一个峰值周期，因此测量速度随着网络带宽和激励频率的变化而改变。另外，检波二极管的带宽限制使得检波输出电压的非线性变化，并且随着信号频率的增大，检波误差也会相应增大，这些都影响了幅频特性测量精度。 (2).二极管平衡鉴相原理如上图，二极管平衡鉴相电路由3dB、90度功率分配耦合器、两个相同的二极管检波器组成，其工作原理如下：由上式可推出相位与输出电压的关系，测量输出电压即可以得到相位差φ。因为其实质仍然是建立在二极管检波的基础上，因此二极管检波的缺陷在平衡鉴相原理中同样存在。除此之外，由于二极管平衡鉴相原理是将相位差转换为输出电压的幅度，若两个二极管存在较大差异导致检波电路不配对，则电路会因为失去平衡而造成较大的鉴相误差，降低相频特性测量精度。 2.零中频正交解调测量原理零中频正交解调原理就是将信号直接从高频解调到基带，不经过中频解调的原理。该原理早在二十世纪三十年代就应用在无线通信领域，最具代表是零中频接收机，其原理框图如下：发展到现在，零中频正交解调更是应用到了电子测量领域，利用零中频解调原理设计一个简易频率特性测试仪便是其中一个应用。其原理框图如下：首先，正交扫频信号源输出两路（I路和Q路）等幅同频正交的正弦信号分别为：Acosωt和Asinωt。其中，I路信号Acosωt输入到线性被测网络中，其输出信号与输入信号相比频率不变，但是幅度和相位均有相应的变化，设被测网络输出信号的一般表达式为：Bcos(ωt+φ)，即通过被测网络的信号，幅度大小由A变成了B，相位大小由0°变成了φ。因此，被测网络在$ω$这个频率点的幅频特性和相频特性为B/A和φ，通常幅频特性用对数形式表达，即为：20㏒(B/A)$。但由上图可知，我们只得到了两路（I路和Q路）的直流电压值，怎么推算出频率特性呢。公式如下：显然，经过低通滤波后得到的两路直流偏压就是$\\frac{AB}{2}cosφ$和$-\\frac{AB}{2}sinφ$。令这个直流偏压分别为DC1和DC2，则幅频特性可表示为：相频特性表示为：","categories":[{"name":"work","slug":"work","permalink":"http://yoursite.com/categories/work/"}],"tags":[{"name":"work","slug":"work","permalink":"http://yoursite.com/tags/work/"},{"name":"think","slug":"think","permalink":"http://yoursite.com/tags/think/"}]},{"title":"电脑简易选购指南","slug":"电脑简易选购指南","date":"2019-03-07T10:26:38.000Z","updated":"2019-03-07T11:15:30.743Z","comments":true,"path":"2019/03/07/电脑简易选购指南/","link":"","permalink":"http://yoursite.com/2019/03/07/电脑简易选购指南/","excerpt":"","text":"笔记本选购指南此指南针对WINDOWS笔记本1.确定需求笔记本大致分为三种：游戏本，商务本（轻薄本），性能本（兼顾性能和商务）。确定自己的需求： 是否需要经常移动自己的笔记本，带着去其他地方。 是否经常有无法充电的场景（比如开会，比如汇报）。 是否有GPU的需求，比如玩游戏，比如视频剪辑。 是否对CPU有算力的需求，比如做仿真。 是否对电脑发热比较介意，想要更清凉的感觉。 是否对笔记本质感有需求，更好的外观，更有质感的材质。 是否对笔记本品牌有需求，喜欢更加大牌的品牌。 仔细思考上诉问题，再根据笔记本特点确定自己需要哪种笔记本。 游戏本 优点：有更好的屏幕素质（现在普遍用上了NTSC72%的IPS雾面屏），更好的CPU（至少是最新款的8代i5或i7标压因特尔处理器），更好的GPU（至少是最新款的10系英伟达处理器），更好的发热处理，酷炫的外形和更好的键盘。 缺点：笨重，不便于携带，长时间携带让人疲惫。辣鸡续航，不插电3小时死给你看。笨拙的质感，不够优雅。 适合人群：玩游戏的人，不需要经常携带笔记本外出的人，可以长期插电的人，对笔记本性能需求比较高的人。 轻薄本 优点：轻薄，携带非常方便，相比游戏本通常比较小巧。续航上佳，可以长时间不插电工作。外观讨喜，有商务的质感。 缺点：相比游戏本性能一般，能满足一般日常需求（看视频，使用OFFICE），无法满足专业需求。 适合人群：办公人群，需要经常携带笔记本的人。 性能本 优点：前两种笔记本的优点兼而有之，但又不像前两种那么纯粹，有所取舍。 缺点：不够纯粹，无法满足极致的需求。 2.如何挑选从配置方面来挑选，配置包括：CPU,GPU,屏幕素质,存储配置，续航时长,电脑重量。键盘质量基本不考虑。 游戏本 优先考虑GPU，虽然目前20系显卡已经上市，但价格依然很高，所以只考虑10系显卡。中端GPU有两种，1050ti和1060，只考虑这两种，其他都不考虑。1050更便宜，但性能较1060差距较大。根据自己需求来。 再考虑CPU，首先一定是8代CPU，其次就是I5和I7的区别。I7性能更好但发热更多，且i7主要强在多线程，单核比i5提升不是特别明显，i5性价比更高，但i7的性能也还是比i5更强，i7要贵一点，看自己价格区间。 存储配置至少是8G内存+128G的SSD+1T的机械硬盘，内存和SSD最好选择西部数据，希捷，三星这几个品牌。 屏幕素质，一定要是NTSC72%的IPS雾面屏，其他都不考虑（尤其是不要镜面屏，会照出人影，非常影响观感）。NTSC是色彩丰富度，越高色彩越丰富，市场上很多NTSC45%的屏幕，注意区别。 重量，游戏本都很重。 续航，游戏本都是辣鸡。 轻薄本 优先考虑重量，基本1-1.5kg之内，更轻的话一般都很贵。 续航4个多小时应该是刚需。 CPU只考虑两种：i5-8250U和I7-8550U，其他的都不考虑。这两个都是低压CPU，I7性能更好，更贵，看自己需求。 存储配置至少是8G内存+128G的SSD+1T的机械硬盘，内存和SSD最好选择西部数据，希捷，三星这几个品牌。 GPU，无所谓了。 3.品牌推荐最好选择联想，戴尔，华硕这些知名厂商，神舟性价比高但品控不好容易出问题。一些比较好的系列：联想拯救者，联想小新，戴尔XPS，戴尔暗影精灵，戴尔灵越，华硕swift。","categories":[{"name":"life","slug":"life","permalink":"http://yoursite.com/categories/life/"}],"tags":[{"name":"think","slug":"think","permalink":"http://yoursite.com/tags/think/"},{"name":"life","slug":"life","permalink":"http://yoursite.com/tags/life/"}]},{"title":"9月小结","slug":"9月小结","date":"2018-09-30T09:21:12.000Z","updated":"2018-10-01T12:48:58.212Z","comments":true,"path":"2018/09/30/9月小结/","link":"","permalink":"http://yoursite.com/2018/09/30/9月小结/","excerpt":"","text":"九月小结人果然是失去才懂得珍惜。 八月的分手算是彻底把我暑假的计划打乱了。原本心心念念地要在暑假如何提高自己，也终于变成了每天早上起床后开始怀疑人生的颓废。自己在家里无论如何也做不到好好生活，于是把所有希望寄托到了南京，寄托到一个什么故事都没发生过的城市。 到了南京，自己慢慢总算是振作起来了，九月总算是要过去了，简单小结一下吧。 开学开学没有什么惊喜，自然而然地去报到，自然而然地去到教室，自然而然地下课，自然而然地去食堂，刚刚过去的暑假丝毫不影响我对南邮学习生活的熟练。一举一动都已是习惯，自不必言。 迎新迎新其实是很好玩的事情，看又一届新生来到大学——自己努力三年的结果，是一件很幸福的事情。人都喜欢青春的，阳光的，纯洁的。新生在我心里就是这样的。和他们交流让我仿佛也回到了两年前的九月一般，自己独自一人拖着大包小包来到南邮，那份激动与喜悦一直都在我的心里。那一天我走了两万六千多步，来来回回送了六次新生，真不觉得疲惫，很久没有这样充实过了。 新生宣讲会好吧，第一次穿正装。哈哈哈，人靠衣装，佛靠金装，穿上一身西装后果真感觉自己是有点不同的感觉了呢。一个正式的场合，一套正式的服装，一份熟练背诵的讲稿，还有精心准备的讲稿。今年的新生宣讲会对于通院科协来说，对于我来说，是成功的，是令人喜悦的。然而最精彩的，应当数宣讲会结束后的庆祝酒会了。感谢马万里，从欧洲带回来的威士忌虽然味苦，但心里却是甜甜的。晚会进行到最后，又唱又跳可以说是无比开心！下图是自己为数不多能上点镜的照片了大家的合照！！！ 招新宣传结束就该轮到发卷子了，其实本来这是一件小事，但正如央视那句广告：小事不小。疏忽就会出岔子。因为对报名新生的数量预计不足，导致打印的卷子数量不够，大量的新生在304等候领卷子，这应该算科协一个很大的失误了。但最让我失望的，应当是那天大多中干没有到场，让我那天晚上发了火。说到底还是自己没有讲到位，社团的主人翁意识，我后面反思到。 联谊从我大一加入科协以来，我印象里科协是没有和其他社团联谊过的。和秘书处的这次联谊其实完全算是我和秘书处的黄主席发起的。黄主席实在是非常nice的一个人，我那天发完火后回寝室和他聊到社团的事情，都觉得中干们主动性还不足，得想办法增加他们的社团归属感，于是这次的联谊活动。虽然形式很简单，就是去吃烧烤，但大家情绪都太高涨了，让那个晚上欢乐无比。而我印象最深的莫过于自己当众叫错名字的丢人场景了。那晚喝了很多酒，很久没喝那么多酒了，谁叫中干们数量这么多呢！ 课程设计在开始课程设计之前，自己就已经有心里准备了，要把整个班扛起来，作一个称职的学习委员。但事实证明，一个人的能力还是太有限了。课程设计开始后，和同学们一起讨论电路，做仿真，把电路发到班群里，帮大家调电路，自己真的是很忙了。调到后面自己真的可以说心态都有点要崩掉了，明明是按照我给的电路搭的，就是达不到我想要的效果，自己也不知道怎么办，就一个劲儿的瞎调，浪费了不少的时间。最后一天，轮到自己搭显示电路的时候，倒好，明明就是按照给的电路搭的，就是出不来，简直让人绝望一般。不停地调调调。最后发现原来自己连线连错了，太马虎了。 招新面试去年招新面试的场景自己印象还是很深，遇到了特别认真的学弟学妹，回答问题从容自然。也遇到了没有好好准备的学弟学妹，面对问题时有些窘迫。去年从下午一点半就开始了面试，一直面试到晚上9点半，那天面试自己真真确确嗓子完全哑掉了。今年为了不再让这样的悲剧出现，我们把面试改到了两天，每晚6点半开始。依然和去年一样的场景，只是今年自己不再是面试官，坐在教室后面看大二的中干们面试，心里是颇有些感慨的。一是岁月匆匆，自己真的已经大三了，面临着各种压力。二是新鲜血液的加入，让我感觉生活仿佛被重新漆了一遍，未来的一年我们社团将围绕他们打转。 锻炼自己最开始有意识地健身应该是初中，看到了一本杂志上介绍了5个健身动作，自己便开始做了起来，一做就是一年。自己的身体状态也是从那个时候开始有了很大的改善。后来上强度开始真正锤炼自己身体应该是高中时期。每天晚上下课都会去跑步，拉引体向上，举哑铃，做仰卧起坐，做平板支撑，自己的身材在那个时候应该是达到巅峰了，悄悄地放一张照片，嘘~~后来上大学以后，是真的慢慢就开始不怎么运动了，腹肌什么的慢慢都没了。连以前最喜欢的篮球也慢慢地越打越少了。失恋后，回到南京，自己是下定决心要改变自己，首先就从锻炼开始。第一天晚上跑步，我真的挺难受的，跑跑停停，五公里好难坚持下来。只能心里感慨一句，自己身体素质退步太大了。慢慢开始适应跑步后，又开始练起了腹肌，自己从前那一身漂亮的腹肌真不应该丢掉呀~ 最后小小总结一下，整个九月自己的生活规律了很多，也领悟到了关于感情更加成熟的东西。我和别人谈起自己的大学，我都会说，虽然看起来我很努力，但其实我也是在以另一种方式堕落罢了，我现在所有的努力，都是为了追上当初的自己。","categories":[{"name":"life","slug":"life","permalink":"http://yoursite.com/categories/life/"}],"tags":[{"name":"life","slug":"life","permalink":"http://yoursite.com/tags/life/"}]},{"title":"通院大三上课程设计指南","slug":"通院大三上课程设计指南","date":"2018-09-25T12:02:31.000Z","updated":"2018-09-30T09:23:21.645Z","comments":true,"path":"2018/09/25/通院大三上课程设计指南/","link":"","permalink":"http://yoursite.com/2018/09/25/通院大三上课程设计指南/","excerpt":"","text":"课程设计要求一.名称：简易频率合成器二.要求：1、输出信号频率范围：1kHZ~999kHZ2、输出信号波形：方波3、输出信号频率最小可调步长：1kHZ4、用发光二极管做锁定指示5、输出频率误差；《10-3 三.元器件清单：1、74160 X9 (四位十进制计数器)2、CD4046 X1（锁相环）3、CD4511 X3（BCD-7段译码器）4、74139 X3 （2-4线译码器）6、7420 X1（D触发器）7、74153 X3（4选1数据选择器）8、10K排阻X29、8位拨码开关X210 、7474 X1（4输入与非门）11、电阻、电容若干12、数码管X3 四.基本原理五、电路连接1、预分频电路，采用3个7416（四位十进制计数器）同步级联，实现10X10X10即1000分频，输入信号1MHZ，得到1KHZ窄脉冲2.锁相环电路锁相环电路已经在上面有所说明，具体电路连接如下：3.可编程分频电路采用3个74160使用同步并入设置初值的方式实现可编程变频的功能4.显示电路采用动态显示或者静态显示方式实现数码管显示 五.调试说明1、分频电路分频电路第一个74160的2脚（CLK脚）接1MHZ方波，测第三个74160的15脚，如果有1KHZ的窄脉冲说明正常工作。如果没有，检查第二个74160的15脚，如果也没有窄脉冲，则检查第一个74160的15脚，如果还是没有，说明第一个74160已经损坏，应该更换芯片。如果第一个有，而第二个没有，则说明第二个74160已经损坏，应该更换芯片。依此类推。2、锁相环电路锁相环电路的电路参数一定需要按照图示连接，目前使用其他参数的电阻和电容没有发现能够正常工作的。此外，如果想单独测试4046是否正常工作，可以在14脚加上一个1KHZ的方波，3脚加上一个1KHZ的方波，检查4脚的输出，如果4脚有方波输出，基本可以认为4046正常工作。3、可编程分频电路这个电路非常容易出现问题，如果没有出现理想的情况。首先应检查芯片电源和地是否正常连接。此外，检查3个74160的1脚是否接入了电源。接着，检查第一个74160的P端和T端（即7脚和10脚）是否接入电源。再然后，检查第二个74160的P端和T端（即7脚和10脚）是否和第一个74160的RCO端（15脚）相连。以此类推，检查第三个74160的P端和T端（即7脚和10脚）是否和第二个74160的RCO端（15脚）相连。再检查7420的四个输入端是否与三个74160的RCO端相连，并且其中有两个输入端短接。检查连接都没有问题后，上电，在第一个74160的CLK（2脚）接入1KHZ的方波。将示波器接入7420的8脚，如果看到下列图像，说明正常工作如果没有看到上述波形，则说明未正常工作。此时，首先检查第一个74160的2脚，如果看到下列图像如果有这个图像，说明第一个74160正常工作，如果没有，说明该74160已损坏，需要更换。如果第一个正常工作，检查第二个74160的2脚，应该看到比上图稀疏的窄脉冲，如果没有图像，则74160损坏。如果有波形，但没有变稀疏，请再次检查电路连接。如果第二个正常工作，检查第三个74160的2脚，应该看到比第二个74160更加稀疏的波形。如果没有图像，则74160损坏。如果有波形，但没有变稀疏，请再次检查电路连接。未完待续。","categories":[{"name":"work","slug":"work","permalink":"http://yoursite.com/categories/work/"}],"tags":[{"name":"work","slug":"work","permalink":"http://yoursite.com/tags/work/"},{"name":"life","slug":"life","permalink":"http://yoursite.com/tags/life/"}]},{"title":"KEIL5安装","slug":"KEIL5安装","date":"2018-09-11T12:48:39.000Z","updated":"2018-09-11T13:52:08.221Z","comments":true,"path":"2018/09/11/KEIL5安装/","link":"","permalink":"http://yoursite.com/2018/09/11/KEIL5安装/","excerpt":"","text":"STM32F4xx系列开发工具MDK5安装教程一、安装MDK51首先下载MDK5安装包 1点击安装 1下面选择安装位置，默认安装C盘，建议更改在其他硬盘 1填写个人信息 1安装 1安装成功后，桌面出现下列图标 1最后点击 Finish 即可完成安装，随后，MDK 会自动弹出 Pack Installer 界面 1点击Check for Update确认更新 1找到STM32F4XX，未更新显示为install,点击 1安装完毕后 二、破解1右键点击MDK5，选择以管理员身份运行 1然后，点击：File ——License Management，调出注册管理界面 12从上图可以看出，MDK 此时是评估版，使用上面是有限制的，不能编译超过 32K 的代 码，需要输入注册码以后才可以正常使用。接下来，我们看看如何注册。首先，运行光盘 MDK5 目录下的 keygen.exe（要先解压， 如果杀毒软件误报误杀，那就先关了杀毒软件，再解压） 1在 keygen.exe 里面，设置 Target 为 ARM，然后拷贝 MDK License Management 界面里面的 CID 号， 到 keygen.exe 里面CID栏，点击：Generate，即可获得注册码 1之后，拷贝注册码到 License Management 里面，点击 Add LIC 即可完成注册 1如图，该软件可用到2020年6月。 三、安装JLINK驱动12在初次插入JLINK时，可能会出现驱动安装不成功，导致程序无法下载到板子里，此时可以手动安装驱动下载该安装包，点击安装。 1点击YES同意安装，后续点击NEXT，缺省设置安装即可 1安装完成后，桌面可以看到两个图标 1点击J_LINK,出现下列图像 1再次连接JLINK，点击配置。 1选择Device 1选择STM32F405RGTX 1再点击Debug 1选择J-LINK 1再点击Settings 1选择Flash Download,点击add,选择Flash Size为1M的选项 1配置完后点确定，即可下载程序。 1STM32F4XX核心板 1JLNK 1JINK与STM32F4XX正确连接方式：SWD与SWDIO相连，CLK与SWCLK相连，GND 与GND相连，5V连接在5V接口，如图。","categories":[{"name":"work","slug":"work","permalink":"http://yoursite.com/categories/work/"}],"tags":[{"name":"work","slug":"work","permalink":"http://yoursite.com/tags/work/"},{"name":"think","slug":"think","permalink":"http://yoursite.com/tags/think/"}]},{"title":"三年","slug":"三年","date":"2018-08-17T10:10:29.000Z","updated":"2018-08-17T13:46:10.109Z","comments":true,"path":"2018/08/17/三年/","link":"","permalink":"http://yoursite.com/2018/08/17/三年/","excerpt":"","text":"三年一、相识男孩和女孩的相识是在2009年的秋天。两个农村娃儿从乡下转校到了城里。羞涩的自我介绍，尴尬的第一节英语课出糗。男孩子满怀着梦想和抱负来到这里，拼命学习。和女孩的结识他并不在意。他认识了几个谈得来的哥们儿，整天调笑。他这个农村娃儿在班上第一次知道了原来男女有情侣这种关系。他第一次知道了原来教室里也可以安喇叭，原来老师有话筒。一切显得那么新奇。女孩很外向，他们成为了朋友。但话不多。 女孩在班上老是被欺负，有坏男孩剪她头发，偷她东西。甚至解开她颈上的文胸带。男孩没有替她解围。他默默地扮演着一个普通朋友的样子。 男孩和女同桌传出绯闻了，尽管他跟女同桌没有什么关系。大家都在开玩笑。这让他有点尴尬。他还是在努力地学习，补齐自己的英语短板。 女孩的成绩不是很好，从小就有点。为此，挨了老师不少骂。她最恨教数学的女老师。那是个势利的女恶魔。 但那时男孩并不知道这些，他对班上的事情了解不多。他觉得女孩是个很善良，很可爱的女孩。嗯，就是很可爱。 二、升温小学毕业后，男孩和女孩都进入了划区内的学校。他们的家只隔了一个十字路口。男孩回到自己长大的村里去寻找曾经的童真。女孩回到乡下的外爷家里，去和自然亲近。这个暑假，他们没有太多交集。 初一，男孩被表白了。是小学同学。他五年级转校过来，她六年级转校过来。男孩特别紧张，他第一次遇到这种问题。拒绝了。对方没有放弃，男孩最终答应了。 女孩也在初中收获了爱情，但男孩和女孩却慢慢成为了好友。男孩爱和兄弟去KTV唱歌。找不到人总是喜欢打电话给女孩。女孩也总是会来，静静坐着，很少唱歌。 男孩喜欢坐在她旁边，和她说话。KTV很吵，他们贴的很近。 男孩变得很健谈，爱开玩笑，爱耍贫。这样好像很能吸引人，尤其女孩子。把女孩子逗得哈哈大笑，让人觉得开心。 男孩听说了女孩的爱情，是个大她很多的男生。和她是同乡。她受了伤，他不知道怎么安慰。 高中，男孩女孩去了不同的学校。男孩的女友和女孩变成了室友。女友和女孩从闺蜜变成了敌人。男孩也分手了。 女孩在寝室维护男孩，不让室友肆意地嘲讽。男孩越发珍视这份友情了。 他们开始无话不谈了，女孩善解人意。男孩很喜欢和她聊天的感觉。 三、定情男孩终于变得稍稍有些成熟一点。他发现自己开始梦见女孩了。这是爱么？ 女孩和男孩的友情越来越坚固了。男孩把自己身边的一切和她分享。听她分析，同她欢笑，这让他觉得很快乐。 一天晚上，男孩同女孩发着短信聊天。男孩问：有没有礼物送我呢？女孩答：我把我送给你好不好？男孩一夜无眠。 女孩很喜欢散步，总是在晚饭后，去河堤。慢慢地，身边多了一个男孩。谈话内容从星空到大海。总是那么快乐。他们更加熟悉了。 男孩确定自己爱上女孩了。但他很犹豫。失败了便再也不能做朋友了。真让人纠结。 女孩浑然不知，他告诉男孩：我们是好兄弟！ 他们现在早上也一起散步了。高中生因为生物钟的原因，总是起的很早。早上的空气很湿润，总是沾湿他们的脸颊。 男孩喜欢运动，有六块腹肌。女孩对此很称赞。她觉得男孩很阳光。 突然，女孩邀请男孩去她乡下的家住几天。男孩受宠若惊。女孩仿佛不觉得这有什么。男孩还是去了。 乡下的空气很好。女孩的家面前有一小片土地，外公在里面种植了许多植物。女孩指给男孩，男孩不知道。女孩笑男孩五谷不勤，一个个说给男孩。 男孩很有心机，不经意把腹肌露出来。但女孩并不在意。 他们晚上躺在一张床上聊天，没有开灯。天气很热，空气很黏。气氛暧昧了起来。 他们谈到了接吻。男孩突然问：我可以吻你吗？女孩愣住了。男孩鼓起勇气，吻了女孩：可以做我女朋友吗？女孩没有回答。男孩急了，又吻了她。空气凝固了三秒。女孩主动吻了上来。 他们热烈地吻在了一起。女孩的妈妈却突然打开了门。男孩和女孩同时打了一个激灵。幸好没有开灯。 他们在一起了。 四、热恋男孩和女孩几乎每天见面，他们认识了6年，很熟。聊天时空气仿佛都是甜蜜的。 结束那个假期，男孩和女孩升入高三了。高三的压力很大，学科负担急速增加。男孩却患上了奇怪的头疼病。 他以为是感冒了，吃了几次感冒药。还是头疼。 去医院检查，医生开了止疼片。还是头疼。 女孩很心急，她几乎每天都问：今天头疼好点了吗？男孩喜欢回答：今天还好。 男孩为了和女孩聊天，拿出了以前的按键手机。每晚下晚自习后用手机QQ和女孩聊天。聊天时间很短，甚至像汇报。但男孩很满足。 男孩每隔两天就会用学校的公用电话给女孩打电话。女孩总是提前洗漱好等她。电话打过去往往瞬间就能交通。男孩告诉女孩今天发生的故事，即使没有故事。 他们很思念彼此，总是盼望着见面。男孩有时中午会请假出去和女孩在咖啡馆见面。短短一个半小时。很幸福。 男孩会给女孩写信尽管他的字很丑。女孩会给男孩选衣服，她的眼光很好。 一周年的时候，他们去了那家熟悉的蛋糕店做了蛋糕。购买了对戒。在酒店交换了戒指。希望永远相爱。 男孩很爱女孩，女孩很爱男孩。第一年，他们很幸福。 五、平淡高考结束。男孩去了南京，女孩选择了复读。曾经女孩高三在家复习，总有时间陪男孩。现在男孩很少能找女孩聊天了，她在上课。 距离阻止了他们见面，但幸好还有网络。他们每天都聊天，聊出了巨轮。男孩第一次离家很远，一切都很新奇。 他把学校拍摄给女孩看。把自己的食物拍摄给女孩看。和女孩吐槽这边的川菜不地道。讲诉自己遇到的新同学。 他们还是热切地聊着，期待着见面。 男孩学习了工科，学得很努力。但女孩开始发现男孩好像没有以前爱说话了。他好像变得有些木讷了。 聊天的内容终于还是变少了。大学的生活同样单调。女孩也没有更多的故事和男孩分享。男孩总是忙着他的社团，不停地做东西。或者看球赛。他找女孩的时候少了。 两人的感情还是坚固。但日子平淡下来了。 每天还是会聊天，但开始少了些激情了。女孩意识到了。她有些娇气地说：你要很宠很宠我。男孩知道了，但没做到。 他喜欢逛虎扑，喜欢逛知乎。喜欢看文章，喜欢回帖。喜欢看球赛。就是开始不太喜欢找女孩聊天。 女孩依旧刷剧，玩游戏，上课。只是，她找男孩的频率也变少了。有时，她也会傲娇地说：不和你说了，我看剧去了。 日子是变得平淡了。 六、结束他们第一次分手是第二年的夏天。男孩留校参加比赛。他们的纪念日近了。男孩却没有给女孩安全感。 分手后，男孩病了。他患上了严重的腰疼，又发着烧。在床上躺了两天。第三天，女孩打电话过来。他们复合了，男孩的病好了。 他们第二次分手是第三年的冬天。男孩邀请女孩来家吃饭。中间产生了误会。女孩没来。男孩很生气。他们吵架了，于是分手了。 后来，男孩到女孩家做“最后一次谈话”。女孩哭的很厉害。男孩忍不住抱住她：不哭了，不哭了，我们复合吧。 最后一次分手，是不欢而散。女孩说男孩直男癌，男孩很不开心。他们几天没联系。分手了。 结束了，就在沉默中。 七、结束语三年，是奇妙的旅程。女孩总是比男孩成熟很多，但男孩又不承认。总觉得自己已经尽力了，没有错。殊不知，你的努力那么渺小。 三年前，在一起，那些暧昧的日子，那在一起的一刻。现在想起来，心还是会忍不住颤抖。真美好啊！ 但它已经消逝了。女孩为男孩付出了一切，男孩尽了自己的力。结果让人难过。 未分手时，有过不悦。分手后，却又难以放下。爱情，真是折磨人。","categories":[{"name":"life","slug":"life","permalink":"http://yoursite.com/categories/life/"}],"tags":[{"name":"life","slug":"life","permalink":"http://yoursite.com/tags/life/"},{"name":"love","slug":"love","permalink":"http://yoursite.com/tags/love/"}]},{"title":"TM4C129建立FREERTOS工程","slug":"TM4C129建立FREERTOS工程","date":"2018-08-09T06:18:42.000Z","updated":"2018-08-09T07:48:43.636Z","comments":true,"path":"2018/08/09/TM4C129建立FREERTOS工程/","link":"","permalink":"http://yoursite.com/2018/08/09/TM4C129建立FREERTOS工程/","excerpt":"","text":"写下这篇教程的原因主要是自己当初学习TM4C129使用FREERTOS操作系统时，发现TI只提供了TM4C123G的移植工程而没有提供TM4C129的，并且网络上教程比较少，而且有很多的教程存在问题，因此把自己当初建立 FREERTOS操作系统的过程写成一个教程，供大家参考。 FREERTOS操作系统介绍FREERTOS是免费的、自由的、不受约束的操作系统。操作系统允许多个任务同时运行，这个叫做多任务，实际上，一个处理核心在某一个时刻只能运行一个任务，操作系统中任务调度器的责任就是决定在某一个时刻究竟运行哪个任务，任务调度在各个任务之间的切换非常快，这就给人们造成了同一个时刻有多个任务同时运行的错觉。 操作系统源码下载进入FREERTOS官网下载源码下载得到一个.exe文件，安装后实际上是一个文件夹，里面存放着FREERTOS的源码及一些相关的移植好的工程。点开FREERTOS中的Source文件夹就是我们的FREERTOS源码了。 FREERTOS移植一、添加源码1.首先需要新建一个空白工程，详见TM4129新建工程2.在工程中新建一个FREERTOS文件夹3.将FREERTOS源码移植到该文件夹中4.注意！portable文件夹只需要留下keil,MemMang和RVDS三个文件夹 二、在工程中添加文件1.打开新建好的工程，新建分组FREERTOS_CORE和FREERTOS_PORTABLE，然后向这两个分组中添加文件2.注意！这里heap_4.c是第四种内存管理办法，一共有5中内存管理办法，原理不同，各有利弊。 三、添加相应的头文件路径1.添加完文件后，还要添加其源码的头文件路径2.添加FreeRTOSConfig.h文件在TM4123G提供的FREERTOS例程中可以找到该文件，我这里也可以提供一个链接3.FreeRTOS里面有许多定义，包括系统时钟，滴答时钟等等，更多的详细说明可以参考原子资料FREERTOS开发手册4.注意！开发手册里面提到了关于钩子函数编译错误的问题，我在实际开发中也遇到了此问题，文中提到了解决办法，请读者有机会一定要读一读这个开发手册，虽然此开发是针对STM32，但也只是在建立工程时有所区别，后面的学习都可以跟着此开发手册来。 四、修改Startup.s文件Startup.s文件是系统的启动文件，主要包括堆和栈的初始化配置、中断向量表的配置以及将程序引导到main( )函数等。Startup.s主要完成三个工作：栈和堆的初始化、定位中断向量表、调用Reset Handler有关Startup.s文件的介绍，推荐看下这篇博客我们需要把文件修改为如下格式：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359; &lt;&lt;&lt; Use Configuration Wizard in Context Menu &gt;&gt;&gt;;******************************************************************************;; startup_rvmdk.S - Startup code for use with Keil&apos;s uVision.;; Copyright (c) 2013-2017 Texas Instruments Incorporated. All rights reserved.; Software License Agreement; ; Texas Instruments (TI) is supplying this software for use solely and; exclusively on TI&apos;s microcontroller products. The software is owned by; TI and/or its suppliers, and is protected under applicable copyright; laws. You may not combine this software with &quot;viral&quot; open-source; software in order to form a larger program.; ; THIS SOFTWARE IS PROVIDED &quot;AS IS&quot; AND WITH ALL FAULTS.; NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT; NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR; A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY; CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL; DAMAGES, FOR ANY REASON WHATSOEVER.; ; This is part of revision 2.1.4.178 of the EK-TM4C1294XL Firmware Package.;;******************************************************************************;******************************************************************************;; &lt;o&gt; Stack Size (in Bytes) &lt;0x0-0xFFFFFFFF:8&gt;;;******************************************************************************Stack EQU 0x00000200;******************************************************************************;; &lt;o&gt; Heap Size (in Bytes) &lt;0x0-0xFFFFFFFF:8&gt;;;******************************************************************************Heap EQU 0x00000000;******************************************************************************;; Allocate space for the stack.;;****************************************************************************** AREA STACK, NOINIT, READWRITE, ALIGN=3StackMem SPACE Stack__initial_sp;******************************************************************************;; Allocate space for the heap.;;****************************************************************************** AREA HEAP, NOINIT, READWRITE, ALIGN=3__heap_baseHeapMem SPACE Heap__heap_limit;******************************************************************************;; Indicate that the code in this file preserves 8-byte alignment of the stack.;;****************************************************************************** PRESERVE8;******************************************************************************;; Place code into the reset code section.;;****************************************************************************** AREA RESET, CODE, READONLY THUMB;******************************************************************************;; External declarations for the interrupt handlers used by the application.;;****************************************************************************** EXTERN xPortPendSVHandler EXTERN vPortSVCHandler EXTERN xPortSysTickHandler;******************************************************************************;; The vector table.;;****************************************************************************** EXPORT __Vectors__Vectors DCD StackMem + Stack ; Top of Stack DCD Reset_Handler ; Reset Handler DCD NmiSR ; NMI Handler DCD FaultISR ; Hard Fault Handler DCD IntDefaultHandler ; The MPU fault handler DCD IntDefaultHandler ; The bus fault handler DCD IntDefaultHandler ; The usage fault handler DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD vPortSVCHandler ; SVCall handler DCD IntDefaultHandler ; Debug monitor handler DCD 0 ; Reserved DCD xPortPendSVHandler ; The PendSV handler DCD xPortSysTickHandler ; The SysTick handler DCD IntDefaultHandler ; GPIO Port A DCD IntDefaultHandler ; GPIO Port B DCD IntDefaultHandler ; GPIO Port C DCD IntDefaultHandler ; GPIO Port D DCD IntDefaultHandler ; GPIO Port E DCD IntDefaultHandler ; UART0 Rx and Tx DCD IntDefaultHandler ; UART1 Rx and Tx DCD IntDefaultHandler ; SSI0 Rx and Tx DCD IntDefaultHandler ; I2C0 Master and Slave DCD IntDefaultHandler ; PWM Fault DCD IntDefaultHandler ; PWM Generator 0 DCD IntDefaultHandler ; PWM Generator 1 DCD IntDefaultHandler ; PWM Generator 2 DCD IntDefaultHandler ; Quadrature Encoder 0 DCD IntDefaultHandler ; ADC Sequence 0 DCD IntDefaultHandler ; ADC Sequence 1 DCD IntDefaultHandler ; ADC Sequence 2 DCD IntDefaultHandler ; ADC Sequence 3 DCD IntDefaultHandler ; Watchdog timer DCD IntDefaultHandler ; Timer 0 subtimer A DCD IntDefaultHandler ; Timer 0 subtimer B DCD IntDefaultHandler ; Timer 1 subtimer A DCD IntDefaultHandler ; Timer 1 subtimer B DCD IntDefaultHandler ; Timer 2 subtimer A DCD IntDefaultHandler ; Timer 2 subtimer B DCD IntDefaultHandler ; Analog Comparator 0 DCD IntDefaultHandler ; Analog Comparator 1 DCD IntDefaultHandler ; Analog Comparator 2 DCD IntDefaultHandler ; System Control (PLL, OSC, BO) DCD IntDefaultHandler ; FLASH Control DCD IntDefaultHandler ; GPIO Port F DCD IntDefaultHandler ; GPIO Port G DCD IntDefaultHandler ; GPIO Port H DCD IntDefaultHandler ; UART2 Rx and Tx DCD IntDefaultHandler ; SSI1 Rx and Tx DCD IntDefaultHandler ; Timer 3 subtimer A DCD IntDefaultHandler ; Timer 3 subtimer B DCD IntDefaultHandler ; I2C1 Master and Slave DCD IntDefaultHandler ; Quadrature Encoder 1 DCD IntDefaultHandler ; CAN0 DCD IntDefaultHandler ; CAN1 DCD 0 ; Reserved DCD 0 ; Reserved DCD IntDefaultHandler ; Hibernate DCD IntDefaultHandler ; USB0 DCD IntDefaultHandler ; PWM Generator 3 DCD IntDefaultHandler ; uDMA Software Transfer DCD IntDefaultHandler ; uDMA Error DCD IntDefaultHandler ; ADC1 Sequence 0 DCD IntDefaultHandler ; ADC1 Sequence 1 DCD IntDefaultHandler ; ADC1 Sequence 2 DCD IntDefaultHandler ; ADC1 Sequence 3 DCD 0 ; Reserved DCD 0 ; Reserved DCD IntDefaultHandler ; GPIO Port J DCD IntDefaultHandler ; GPIO Port K DCD IntDefaultHandler ; GPIO Port L DCD IntDefaultHandler ; SSI2 Rx and Tx DCD IntDefaultHandler ; SSI3 Rx and Tx DCD IntDefaultHandler ; UART3 Rx and Tx DCD IntDefaultHandler ; UART4 Rx and Tx DCD IntDefaultHandler ; UART5 Rx and Tx DCD IntDefaultHandler ; UART6 Rx and Tx DCD IntDefaultHandler ; UART7 Rx and Tx DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD IntDefaultHandler ; I2C2 Master and Slave DCD IntDefaultHandler ; I2C3 Master and Slave DCD IntDefaultHandler ; Timer 4 subtimer A DCD IntDefaultHandler ; Timer 4 subtimer B DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD 0 ; Reserved DCD IntDefaultHandler ; Timer 5 subtimer A DCD IntDefaultHandler ; Timer 5 subtimer B DCD IntDefaultHandler ; Wide Timer 0 subtimer A DCD IntDefaultHandler ; Wide Timer 0 subtimer B DCD IntDefaultHandler ; Wide Timer 1 subtimer A DCD IntDefaultHandler ; Wide Timer 1 subtimer B DCD IntDefaultHandler ; Wide Timer 2 subtimer A DCD IntDefaultHandler ; Wide Timer 2 subtimer B DCD IntDefaultHandler ; Wide Timer 3 subtimer A DCD IntDefaultHandler ; Wide Timer 3 subtimer B DCD IntDefaultHandler ; Wide Timer 4 subtimer A DCD IntDefaultHandler ; Wide Timer 4 subtimer B DCD IntDefaultHandler ; Wide Timer 5 subtimer A DCD IntDefaultHandler ; Wide Timer 5 subtimer B DCD IntDefaultHandler ; FPU DCD 0 ; Reserved DCD 0 ; Reserved DCD IntDefaultHandler ; I2C4 Master and Slave DCD IntDefaultHandler ; I2C5 Master and Slave DCD IntDefaultHandler ; GPIO Port M DCD IntDefaultHandler ; GPIO Port N DCD IntDefaultHandler ; Quadrature Encoder 2 DCD 0 ; Reserved DCD 0 ; Reserved DCD IntDefaultHandler ; GPIO Port P (Summary or P0) DCD IntDefaultHandler ; GPIO Port P1 DCD IntDefaultHandler ; GPIO Port P2 DCD IntDefaultHandler ; GPIO Port P3 DCD IntDefaultHandler ; GPIO Port P4 DCD IntDefaultHandler ; GPIO Port P5 DCD IntDefaultHandler ; GPIO Port P6 DCD IntDefaultHandler ; GPIO Port P7 DCD IntDefaultHandler ; GPIO Port Q (Summary or Q0) DCD IntDefaultHandler ; GPIO Port Q1 DCD IntDefaultHandler ; GPIO Port Q2 DCD IntDefaultHandler ; GPIO Port Q3 DCD IntDefaultHandler ; GPIO Port Q4 DCD IntDefaultHandler ; GPIO Port Q5 DCD IntDefaultHandler ; GPIO Port Q6 DCD IntDefaultHandler ; GPIO Port Q7 DCD IntDefaultHandler ; GPIO Port R DCD IntDefaultHandler ; GPIO Port S DCD IntDefaultHandler ; PWM 1 Generator 0 DCD IntDefaultHandler ; PWM 1 Generator 1 DCD IntDefaultHandler ; PWM 1 Generator 2 DCD IntDefaultHandler ; PWM 1 Generator 3 DCD IntDefaultHandler ; PWM 1 Fault;******************************************************************************;; This is the code that gets called when the processor first starts execution; following a reset event.;;****************************************************************************** EXPORT Reset_HandlerReset_Handler ; ; Enable the floating-point unit. This must be done here to handle the ; case where main() uses floating-point and the function prologue saves ; floating-point registers (which will fault if floating-point is not ; enabled). Any configuration of the floating-point unit using ; DriverLib APIs must be done here prior to the floating-point unit ; being enabled. ; ; Note that this does not use DriverLib since it might not be included ; in this project. ; MOVW R0, #0xED88 MOVT R0, #0xE000 LDR R1, [R0] ORR R1, #0x00F00000 STR R1, [R0] ; ; Call the C library enty point that handles startup. This will copy ; the .data section initializers from flash to SRAM and zero fill the ; .bss section. ; IMPORT __main B __main;******************************************************************************;; This is the code that gets called when the processor receives a NMI. This; simply enters an infinite loop, preserving the system state for examination; by a debugger.;;******************************************************************************NmiSR B NmiSR;******************************************************************************;; This is the code that gets called when the processor receives a fault; interrupt. This simply enters an infinite loop, preserving the system state; for examination by a debugger.;;******************************************************************************FaultISR B FaultISR;******************************************************************************;; This is the code that gets called when the processor receives an unexpected; interrupt. This simply enters an infinite loop, preserving the system state; for examination by a debugger.;;******************************************************************************IntDefaultHandler B IntDefaultHandler;******************************************************************************;; Make sure the end of this section is aligned.;;****************************************************************************** ALIGN;******************************************************************************;; Some code in the normal code section for initializing the heap and stack.;;****************************************************************************** AREA |.text|, CODE, READONLY;******************************************************************************;; The function expected of the C library startup code for defining the stack; and heap memory locations. For the C library version of the startup code,; provide this function so that the C library initialization code can find out; the location of the stack and heap.;;****************************************************************************** IF :DEF: __MICROLIB EXPORT __initial_sp EXPORT __heap_base EXPORT __heap_limit ELSE IMPORT __use_two_region_memory EXPORT __user_initial_stackheap__user_initial_stackheap LDR R0, =HeapMem LDR R1, =(StackMem + Stack) LDR R2, =(HeapMem + Heap) LDR R3, =StackMem BX LR ENDIF;******************************************************************************;; Make sure the end of this section is aligned.;;****************************************************************************** ALIGN;******************************************************************************;; Tell the assembler that we&apos;re done.;;****************************************************************************** END 这里面添加了许多外设以及和FREERTOS时钟控制有关的定义。有兴趣的可以研究一下。 五、修改代码将代码修改如下led.c:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990//*****************************************************************************//// led_task.c - A simple flashing LED task.//// Copyright (c) 2012-2017 Texas Instruments Incorporated. All rights reserved.// Software License Agreement// // Texas Instruments (TI) is supplying this software for use solely and// exclusively on TI&apos;s microcontroller products. The software is owned by// TI and/or its suppliers, and is protected under applicable copyright// laws. You may not combine this software with &quot;viral&quot; open-source// software in order to form a larger program.// // THIS SOFTWARE IS PROVIDED &quot;AS IS&quot; AND WITH ALL FAULTS.// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL// DAMAGES, FOR ANY REASON WHATSOEVER.// // This is part of revision 2.1.4.178 of the EK-TM4C123GXL Firmware Package.////*****************************************************************************#include &lt;stdint.h&gt;#include &lt;stdbool.h&gt;#include &quot;inc/hw_gpio.h&quot;#include &quot;inc/hw_ints.h&quot;#include &quot;inc/hw_memmap.h&quot;#include &quot;inc/hw_types.h&quot;#include &quot;driverlib/debug.h&quot;#include &quot;driverlib/fpu.h&quot;#include &quot;driverlib/gpio.h&quot;#include &quot;driverlib/interrupt.h&quot;#include &quot;driverlib/pin_map.h&quot;#include &quot;driverlib/rom.h&quot;#include &quot;driverlib/rom_map.h&quot;#include &quot;driverlib/sysctl.h&quot;#include &quot;driverlib/systick.h&quot;#include &quot;driverlib/uart.h&quot;#include &quot;FreeRTOSConfig.h&quot;#include &quot;FreeRTOS.h&quot;#include &quot;queue.h&quot;#include &quot;task.h&quot;#include &quot;functions/led_task.h&quot;//*****************************************************************************#define LED_TASK_PRIO 1 //ÈÎÎñÓÅÏÈ¼¶#define LED_STK_SIZE 150 //ÈÎÎñ¶ÑÕ»´óÐ¡//*****************************************************************************//// This task toggles the user selected LED at a user selected frequency. User// can make the selections by pressing the left and right buttons.////*****************************************************************************voidDemoLEDTask(void *pvParameters)&#123; while(1) &#123; GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, GPIO_PIN_0); vTaskDelay(1000); GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, 0); vTaskDelay(1000); &#125;&#125;//*****************************************************************************//// Initializes the LED task.////*****************************************************************************voidLEDTaskInit(void)&#123; // // Create the LED task. // xTaskCreate( DemoLEDTask, //ÈÎÎñº¯Êý (const portCHAR *)&quot;LED&quot;, //ÈÎÎñÃû³Æ LED_STK_SIZE, // ÈÎÎñ¶ÑÕ»´óÐ¡ NULL, LED_TASK_PRIO, NULL ); &#125; main .c:123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159//*****************************************************************************//// blinky.c - Simple example to blink the on-board LED.//// Copyright (c) 2013-2017 Texas Instruments Incorporated. All rights reserved.// Software License Agreement// // Texas Instruments (TI) is supplying this software for use solely and// exclusively on TI&apos;s microcontroller products. The software is owned by// TI and/or its suppliers, and is protected under applicable copyright// laws. You may not combine this software with &quot;viral&quot; open-source// software in order to form a larger program.// // THIS SOFTWARE IS PROVIDED &quot;AS IS&quot; AND WITH ALL FAULTS.// NO WARRANTIES, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT// NOT LIMITED TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR// A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. TI SHALL NOT, UNDER ANY// CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR CONSEQUENTIAL// DAMAGES, FOR ANY REASON WHATSOEVER.// // This is part of revision 2.1.4.178 of the EK-TM4C1294XL Firmware Package.////*****************************************************************************#include &lt;stdint.h&gt;#include &lt;stdbool.h&gt;#include &quot;inc/hw_gpio.h&quot;#include &quot;inc/hw_ints.h&quot;#include &quot;inc/hw_memmap.h&quot;#include &quot;inc/hw_types.h&quot;#include &quot;driverlib/debug.h&quot;#include &quot;driverlib/fpu.h&quot;#include &quot;driverlib/gpio.h&quot;#include &quot;driverlib/interrupt.h&quot;#include &quot;driverlib/pin_map.h&quot;#include &quot;driverlib/rom.h&quot;#include &quot;driverlib/rom_map.h&quot;#include &quot;driverlib/sysctl.h&quot;#include &quot;driverlib/systick.h&quot;#include &quot;driverlib/uart.h&quot;#include &quot;utils/uartstdio.h&quot;#include &quot;FreeRTOSConfig.h&quot;#include &quot;FreeRTOS.h&quot;#include &quot;queue.h&quot;#include &quot;task.h&quot;#include &quot;functions/led_task.h&quot;#include &quot;functions/uartprint.h&quot;//*****************************************************************************////! \\addtogroup example_list//! &lt;h1&gt;Blinky (blinky)&lt;/h1&gt;//!//! A very simple example that blinks the on-board LED using direct register//! access.////*****************************************************************************//*****************************************************************************//// The error routine that is called if the driver library encounters an error.////*****************************************************************************#ifdef DEBUGvoid__error__(char *pcFilename, uint32_t ui32Line)&#123; while(1);&#125;#endifvoid demoSerialTask(void *pvParameters);//*****************************************************************************//// Configure the UART and its pins. This must be called before UARTprintf().////*****************************************************************************voidConfigureUART(void)&#123; // // Enable the GPIO Peripheral used by the UART. // SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA); // // Enable UART0 // SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0); // // Configure GPIO Pins for UART mode. // GPIOPinConfigure(GPIO_PA0_U0RX); GPIOPinConfigure(GPIO_PA1_U0TX); GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1); // // Use the internal 16MHz oscillator as the UART clock source. // UARTClockSourceSet(UART0_BASE, UART_CLOCK_PIOSC); // // Initialize the UART for console I/O. // UARTStdioConfig(0, 115200, 16000000);&#125;//*****************************************************************************//// Blink the on-board LED.////*****************************************************************************intmain(void)&#123; SysCtlClockFreqSet((SYSCTL_XTAL_25MHZ | SYSCTL_OSC_MAIN | SYSCTL_USE_PLL | SYSCTL_CFG_VCO_480), 120000000); ConfigureUART(); UARTprintf(&quot;Start!\\n&quot;); // // Enable the GPIO port that is used for the on-board LED. // SysCtlPeripheralEnable(SYSCTL_PERIPH_GPION); // // Check if the peripheral access is enabled. // while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPION)) &#123; &#125;// //// // Initialize the button driver.// //// ButtonsInit(); // // Enable the GPIO pin for the LED (PN0). Set the direction as output, and // enable the GPIO pin for digital function. // GPIOPinTypeGPIOOutput(GPIO_PORTN_BASE, GPIO_PIN_0); // // Loop forever. // GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, GPIO_PIN_0); LEDTaskInit(); //µãµÆÈÎÎñ´´½¨ vTaskStartScheduler(); //¿ªÆôÈÎÎñµ÷¶È return 0;&#125; 编译下载即可。 最后，附上我自己完成好的工程。例程","categories":[{"name":"work","slug":"work","permalink":"http://yoursite.com/categories/work/"}],"tags":[{"name":"work","slug":"work","permalink":"http://yoursite.com/tags/work/"},{"name":"think","slug":"think","permalink":"http://yoursite.com/tags/think/"}]},{"title":"TM4129教程之建立工程","slug":"TM4129教程之建立工程","date":"2018-08-07T08:04:57.000Z","updated":"2018-08-08T06:41:39.863Z","comments":true,"path":"2018/08/07/TM4129教程之建立工程/","link":"","permalink":"http://yoursite.com/2018/08/07/TM4129教程之建立工程/","excerpt":"","text":"本文开发TM4129使用的软件为KEIL，开发板型号为TM4129NCPDT。一、开发前资料准备进行TM4系列单片机开发需要预先安装如下软件： MDK5.22 keil5.22安装软件 MDKCM522 keillegacy安装软件， 兼容以前版本 keil.TM4C_DFP 1.1.0 TM4C芯片及版的DFP安装包 SW_EK_TM4C1294XL-2.1.4.178 TM4C129XL驱动及样例程序完成安装后，有两个目录\\keil_v5 keil可执行文件目录\\TivaWare_C_Series-2.1.4.178 TIVA系列驱动及样例 二、硬件要求WIN7及以上操作系统，2G内存TM4129XL开发板Micro-USB数据线一根 三、开发步骤注意把之前下载好的TIVA库中的INC和DRIVERLIB两个子目录拷贝到用户目录中1.打开keil5，Project→New uVisonProject,新建一个项目 ，选择好目录后，选择芯片如下图2.单击Source Group 1右键，选择Add New Item to Group “Source Group 1 “如下图所示，生成一个源文件main.c，并完成一个最简单的主函数3.接下来完成一个LED灯闪烁的工程（1）.首先把固件库文件添加到项目中：点击Target1右键，Add Group点击New Group右键，Add Existing File to Group “New Group”,将driverlib.lib库文件添加到此组中，如下图所示，注意文件类型为为LIB（2）.添加开始文件Startup_Tm4c129.s,在下载的例程工程中进行拷贝（3）.配置工程(4).将之前添加的C文件改为如下代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;stdint.h&gt;#include &lt;stdbool.h&gt;#include &quot;inc/hw_memmap.h&quot;#include &quot;driverlib/debug.h&quot;#include &quot;driverlib/gpio.h&quot;#include &quot;driverlib/sysctl.h&quot;//*****************************************************************************////! \\addtogroup example_list//! &lt;h1&gt;Blinky (blinky)&lt;/h1&gt;//!//! A very simple example that blinks the on-board LED using direct register//! access.////*****************************************************************************//*****************************************************************************//// The error routine that is called if the driver library encounters an error.////*****************************************************************************#ifdef DEBUGvoid__error__(char *pcFilename, uint32_t ui32Line)&#123; while(1);&#125;#endif//*****************************************************************************//// Blink the on-board LED.////*****************************************************************************intmain(void)&#123; volatile uint32_t ui32Loop; // // Enable the GPIO port that is used for the on-board LED. // SysCtlPeripheralEnable(SYSCTL_PERIPH_GPION); // // Check if the peripheral access is enabled. // while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPION)) &#123; &#125; // // Enable the GPIO pin for the LED (PN0). Set the direction as output, and // enable the GPIO pin for digital function. // GPIOPinTypeGPIOOutput(GPIO_PORTN_BASE, GPIO_PIN_0); // // Loop forever. // while(1) &#123; // // Turn on the LED. // GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, GPIO_PIN_0); // // Delay for a bit. // for(ui32Loop = 0; ui32Loop &lt; 200000; ui32Loop++) &#123; &#125; // // Turn off the LED. // GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, 0x0); // // Delay for a bit. // for(ui32Loop = 0; ui32Loop &lt; 200000; ui32Loop++) &#123; &#125; &#125;&#125; (5).最后选择编译并且下载程序，按开发板上的Reset键便可以看到灯闪烁现象。","categories":[{"name":"work","slug":"work","permalink":"http://yoursite.com/categories/work/"}],"tags":[{"name":"work","slug":"work","permalink":"http://yoursite.com/tags/work/"},{"name":"think","slug":"think","permalink":"http://yoursite.com/tags/think/"}]},{"title":"18年省赛","slug":"18年省赛","date":"2018-07-28T02:13:59.000Z","updated":"2018-07-28T06:08:52.712Z","comments":true,"path":"2018/07/28/18年省赛/","link":"","permalink":"http://yoursite.com/2018/07/28/18年省赛/","excerpt":"","text":"18省赛虽然现在结果还没出来，但这几天的比赛经历还是想用文字记录下来。 赛前 我们组其实是很认真地在准备这次比赛的，从上学期的组队，小明哥独自参加冬令营，到后面寻找FPGA队友，更换FPGA队友。期间其实还是经历了很多困难的。到后面参加第三次积分赛，这其实算是我们组的第一次完完整整地参加比赛。其实我们组当时是有点骄傲的。两位学长都是第三年参见电赛相关训练了，不管是比赛经验还是手中模块积累，都已经到了一定的水准了。但就像那句成语一样，骄兵必败。果然第一次联调就出现了问题，测试时电压值无法稳定，总是持续不断地降低，一直找不到理由，最后左查又查，终于发现是因为低通滤波器带了增益，导致相位漂移，混频器相位漂移后，非正交调制导致最后电压降低。当时那几天其实是很难受的，熬夜联调却找不到问题，让人非常头大。即使测评前解决了问题，却在切换挡位上出了大问题。测评效果很不好。那次积分赛给了我们很大的教训。 后来，到了第四次积分赛，幅频特性仪，我们组采用了两套方案，一套方案是我和小明哥配合完成的模拟方案，另一套方案是小丁哥独自完成的数字方案。模拟方案提前两天就开始了联调，在比赛前一天就已经完成了所有调试，我们在测评前一晚舒服地睡了一觉。但小丁哥的数字方案其实也早已经完成的差不多了，结果却在和我的单片机通信时发生问题，我始终接收到错误的数据，可能是因为自己的代码实在太过臃肿，一个死循环里太多的逻辑混乱，重复的语句。我印象蛮深的，当时小丁哥坐我旁边看我调代码，却始终不得门道。一整天硬是没有调出来。结果晚上睡了一觉，第二天早上起来重构了代码就能正常通信了，我当时明白了一个很深刻的道理。脑子不清楚千万不要写代码。 到了暑假，开始集训。我们很认真的在进行准备。每天写代码，调试电路，学习系统，忙的不亦乐乎。我在正式比赛前5天开始写一个把所有模块集合在一起的大工程，在测评前一天终于完成，后来，就是这个工程拯救了我和我们组。 比赛 拿到题目的那一刻我们是很懵逼的。每一道题都别出心裁，一时间竟然让我们有点无从下手，不知选哪一题。本来按照我们组的特点，选择通信题——无线话筒是比较合适的。结果在比赛前几天，小明哥一直在研究FM调制却一直没有做出来，他对自己做出这道题来没有把握。但除了这道题，仿佛也没有其他适合我们的题。我们当时并没有选A题的打算，因为A题的霍尔传感器是我们没有接触过的。我们在D题和F题中纠结，从最开始的F题改成了D题，甚至开始抛硬币决定自己的选题。后来，下午大佬过来跟我们推荐了A题——电流检测装置。我们才再一次审视这一道题，这个题仿佛看上去很容易实现，因此命题组对精度提出了更高的要求。幅度精度达到5%，频率精度达到1%。 正式选择了A题以后，我们开始着手制作。但在我们比赛的过程中，我感觉我们是有些慌张和策略不对的，讨论方案花费了我们太多时间。我们在第二天制作好线圈测试时，发现线圈竟然是个微分系统，经过线圈耦合的非正弦信号的不同频率分量会发生发生改变，原本应该是奇次谐波叠加起来的方波，经过线圈后，其频率分量幅度发生改变，并且频率抵消，直接形成了脉冲波，这让我们的测量一下子变得极为困难。接下来的两天，我们在不停地绕制线圈，寻找更好的线圈，同时讨论方案，等我们的方案正式敲定开始写代码时，已经是最后一天了，最后，时间果然不够了。。。 其实作品封箱那一刻，我心里是很带了一些绝望的感觉的，两年的电赛经历大概随着这最后的作品封箱结束了。删除了电脑上的那些个软件，把最后的代码上传到github，我的电赛生涯应该是结束了。我买了测评结束后回家的车票。想象着自己的未来的生活，突然觉得换种生活方式也挺不错的。两年来，自己也是为了这个比赛把自己弄的非常辛苦了。自己需要把注意力转移到学习上来，把注意力转移到生活上来。 当我们决定抢救时，事情开始发生了转机，但我不推荐这种方式，真的，这很不光彩，不值得任何人模仿。我们花两天时间重做了一套。在我们开始做之前，我们预计了一下实现它的难度：我们需要重新购置一些重要的器件，重新制作模拟模块，重新编写代码。快递稍微慢一点就会让我们的计划落空。但我们实现了，它是那样顺利，我们训练了那么久，把自己的所有功力，所有能量都在这两天爆发出来。我之前提到的大工程，它拯救了我们，它完善的功能，让我们一开始就已经有很高的完成度了：能够正确显示并且画图，我们正式基于此制作我们的作品。两天总算是做完了。 赛后其实比赛的意义并不仅限于拿奖，拿奖是目的，但其中的意义应该远不止这些。我最大的收获是明白了学会失败吧。因为实在有太多太多的事情需要去挑战，去实现。就像打游戏一样，你能确保你在一个又一个的关卡里毫发无伤，顺利通关吗？有挑战就有失败，我想学会失败，平静地接受，并开始新的计划，这才是我收获的道。","categories":[{"name":"work","slug":"work","permalink":"http://yoursite.com/categories/work/"}],"tags":[{"name":"work","slug":"work","permalink":"http://yoursite.com/tags/work/"},{"name":"think","slug":"think","permalink":"http://yoursite.com/tags/think/"}]},{"title":"第四次积分赛总结","slug":"第四次积分赛总结","date":"2018-05-22T10:26:38.000Z","updated":"2018-05-22T16:31:59.528Z","comments":true,"path":"2018/05/22/第四次积分赛总结/","link":"","permalink":"http://yoursite.com/2018/05/22/第四次积分赛总结/","excerpt":"","text":"第四次积分赛C题——简易幅频特性测试仪一、原理1.频率特性在任何电路中都存在着电感和电容，当电路中激励源的频率变化时，电路中的感抗、容抗将跟随频率变化，从而导致其工作状态亦跟随频率变化 。我们把电路工作状态跟随频率而变化的现象称为电路的频率特性 ， 又称频率响应 。 通常将待测的电路称为被测网络 ,利用被测网络的输入变量和输出变量之间建立的函数关系来描述被测网络 的频率特性。 我们将输出变量与输入变量幅度的比值如０）A(w)＝ A0/Ａi 与 频率 Ｗ 的 函数关系称为 被测网络的幅频特性,其函数图像即为幅频特性曲线 ； 将输出变量与输入变量相位的变化与频率Ｗ的函数关系称为被测网络的相频特性 ,其函数图像即为相频特性曲线幅频特性和相频特性共同构成被测网络的频率特性 ，频率特性反映了一个被测网络对不同频率的输入信号的增益和移特性 2.零中频原理零中频正交解调原理就是将信号直接从高频解调到基带，不经过中频的原理，故称零中频。其原理框图如下： 首先 ，正交扫频信号源输出两路（ Ｉ 路和 Ｑ 路 ）等幅同频正交的 正弦信号分别 为 ：Acosω和Asinωt。 其 中 ，Ｉ 路信号 如Acosωt输入到线性被测网络中 ,其输出信号与输入信号相比频率不变 ，但是幅度和相位均有相应的变化 ，设被测网络输出信号的一般表达式为 ：Bcos(ωt+φ) 即经过被测网络的信号 ，幅度大小 由 A变成 了B，相 位大 小 由 ０°变成 了 φ。 因此 ，被测网络在这个频率点 的 幅频特性和相频特性为B/A和φ， 通常幅频特性常用对数形式表出即为 ；20㏒（B/A。然而 ， 由上图可知 ，系统仅仅只得到 了 两路 （ Ｉ 路和 Ｑ 路 ） ＡＤＣ 值 ，怎 么通过这两 个直流 电压值算出被测 网络在Ｗ这个频率点频率特性呢 ？ 我们不妨来做 一下理论推导 ， 根据积化和差公式可知 其 中 ,式 （２ － １ ５) （２ － １ ６ ）所计算的结果为乘法器１和乘法器２的输出信号，可看出其输出 信号是一个在直流偏压上的倍频信号，且直流偏压与幅度β和 φ有关 。两个乘法器输出通过理想的低 通滤波器 （滤 除交流信号 ）后 ，其输出倍频信号被滤除 ，仅留下两路直流偏压分别 为AB(cosφ)/2和-AB(sinφ)/2。最后，经过 ＡＤＣ 被 ＭＣＵ得到 ，假设得到 两路 （ Ｉ 路 和 Ｑ 路 ） 直流电压分别为DＣ１和ＤＣ ２ ， 在不考虑测量误差的理想情况下 ， 即有： 在 ＭＣＵ 中 ，可 利用 式 （２ － １ ７巧ｎ （２ － １ ８）反推出被测网络的幅频特性20㏒（B/A）=20㏒（2*（DC1²+DC2²）½）相频特性如下： 二、系统方案1.正交扫频信号源正交扫频信号源采用ADI公司出品的AD9959数字频率合成器。该芯片含有四个直接数字频率合成器（DDS），提供各通道独立的频率、相位和振幅控制。同时还支持16级频率、相位、振幅调制（FSK、PSK、ASK）调制。 使用TI公司出品的TM4123GH6PM作为控制器控制AD9959产生两路正交信号，频率范围为10k~4M.幅度为400mV。具有点频和扫频功能。 DDS信号源后接一个5倍放大器，使信号稳定在2Vpp。经检测，10k~4M的宽带在接近4M时有小幅度的衰减。 2.被测网络被测网络由一个50kHz高通滤波器，300kHz低通滤波器组成。在低通滤波器输入端和下一阶乘法器均做了50欧姆阻抗匹配。实测高通滤波器截至频率50.2kHz,低通滤波器截至频率308kHz. 3.乘法器乘法器采用ADI公司出品的AD835乘法器，该芯片电路简单，可靠。乘法器公式为：Y=X*Y+Z。在本次系统中调节乘法器电路使乘法器叠加一个400mV左右的直流，使得最终滤出的两个直流均为正电压，避免烧坏AD。 4.低通滤波器两个低通滤波器截至频率为10HZ，可保证滤出交流信号中的直流。 5.ADCADC采用TI公司出品的ADS1115，16位低速高精度AD。共4路通道，2，3通道可配置为差分输入通道。最高采样速率820SPS。 6.显示显示采用淘晶驰出品的串口屏，屏幕可绘制，使用串口发送命令控制。 7.算法框图 三、遇到的问题 乘法器直流偏置不稳定，放大后会出现几十到一百多毫伏的浮动解决方案：在每次画完一次频率特性图后，重新校准一次直流偏置。校准方法：将输出信号置0，检测输出直流，将该直流设为乘法器的直流偏置。 采到的直流不准确，因为最初版的低通滤波器RC常数过大，导致改变频率后，需要0.5s时间才能使直流稳定，导致采样不准确。解决方案：修改低通滤波器时间常数，使得低通滤波器时延减小，同时延缓采样时间，使采样准确 使用串口中断单片机卡死，因为代码中大量使用到了串口3发送函数，当接收中断与发送函数冲突，容易引起串口溢出中断，导致程序卡死解决方案：正确解决方案应为，清除错误溢出标志位，但时间紧急，取消了串口中断，放在了主函数中。 相频曲线不稳定，因为取10k频率点为初始相位，该频点属于衰减点，导致最终直流不稳定，相位不稳定。解决方案：选取稳定的100k频点为相位参考点。 四、最终结果 实现了点频测量衰减和相位 实现了扫频画图","categories":[{"name":"work","slug":"work","permalink":"http://yoursite.com/categories/work/"}],"tags":[{"name":"work","slug":"work","permalink":"http://yoursite.com/tags/work/"},{"name":"think","slug":"think","permalink":"http://yoursite.com/tags/think/"}]},{"title":"纪念5.12大地震10周年","slug":"纪念5-12大地震10周年","date":"2018-05-12T05:12:33.000Z","updated":"2018-05-12T05:23:28.080Z","comments":true,"path":"2018/05/12/纪念5-12大地震10周年/","link":"","permalink":"http://yoursite.com/2018/05/12/纪念5-12大地震10周年/","excerpt":"","text":"纪念5.12大地震10周年每年的5月12日都因为10年前的一场天灾蒙上了一层悲伤的面纱，作为这次事件的亲历者，我不由得回忆起那个短暂却深刻的记忆。一段深刻到十年后还清晰到仿佛昨日重现的记忆。 那是个有些闷热，烦躁的午后。时针走过一圈后又不知疲倦地重复曾走过的路。小学紧锁的大门门前渐渐有了些人影，小孩纸们刚刚从甜蜜的午休中醒来，大多还有些发懵。但很多已经恢复了精神，疯闹了起来。小学门前的小卖部生意也一如往常的热闹起来。我就站在门口等待着两点半校门打开的那一刻，不时和周围的同学聊上两句。分针静默地走着，25，26，27。。。它对马上发生的事情一无所知，它只忠实的完成自己的任务。然后，2008年5月12日下午2点28分，地震开始了。一种前所未有的感觉从脚底传来，大地再也没有之前的沉稳，它像一头愤怒的狮子咆哮了起来。猛烈的震动让人们开始站立不稳，人们开始尖叫，开始惊呼，开始骚动。校门口聚集的一大片人乱成了一锅粥。突然，不知道是谁，大喊一声：往垃圾场那边跑！这声音仿佛有魔力一般，人们开始奔跑，齐刷刷地向一个方向奔去。。。 救援队，物资，军人开始大批地进入震区救援，新闻中每天都能看到武警们紧张救援的样子，他们蓬头垢面地在废墟中行走，寻找可能存在的生命迹象。在震后黄金的救援72小时里，他们在与生命赛跑，挽救一切可能。我那时住在操场上，已经陆陆续续地有人搬来了帐篷，操场五颜六色。有人不信邪地回到家中，却又被接连不断地余震赶了出来。人们都在担心，更大规模的地震是否会到来。那是个充满恐慌的日子，坐在椅子上，仿佛都能感受到震动，一点点细小的震动都在撩拨着我们脆弱的神经，后来坐在教室里都时不时会有想冲出去的想法。 但生命也足够强大，那些从地震中走出来的人们，眼中的坚毅能感染每一个人。四川人是乐观的人，我们常爱说“有啥子嘛”，天大的事情骂上两句接着过我们的生活。我们爱喝茶，爱打麻将，爱吃火锅，爱出去玩，我们喜欢体验生活闲适的一面，我们明白生命的可贵，生活的不易。笑对生活，笑对苦难。 10年过去了，或许许多人对那段记忆已经有些忘却。所以我们要在这个时间祭奠死者，祭奠那些逝去的灵魂。用死的悲痛来警醒生的不易。希望那些逝去的灵魂安好，愿生者热爱生活，笑对苦难，","categories":[{"name":"life","slug":"life","permalink":"http://yoursite.com/categories/life/"}],"tags":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/tags/Life/"}]},{"title":"和女孩聊什么","slug":"和女孩聊什么","date":"2018-04-18T15:26:52.000Z","updated":"2018-04-18T15:43:23.588Z","comments":true,"path":"2018/04/18/和女孩聊什么/","link":"","permalink":"http://yoursite.com/2018/04/18/和女孩聊什么/","excerpt":"","text":"和女孩聊什么聊她新买的裙子。聊她昨天的糗事。聊误入宿舍的猫。聊她那个娘炮的同学。聊她命途多舛的闺蜜。 聊她上个月微博抽中的电影票。聊那个总是给她多打肉的食堂大叔。聊那个脾气古怪的教导主任。和她最爱的歌手。 聊她调皮的表弟。聊她帅气的表哥。聊她爸妈偶尔的争吵。聊她小时候全家的旅行。 聊她长大的那个小城。聊她玩闹过的那片街区。聊她早日结婚生子的小姐妹。聊她爱逛的小店。 聊她难过时流过泪的小路。聊她撕毁、焚烧、收藏、保存下来的记忆。聊她的生理期。聊她爱吃的巧克力。聊她九月三号闭上眼的小狗。聊她亲手埋葬时的难过。 聊她的梦想。聊她放弃时的痛苦。聊她的困惑和茫然。聊她身边围绕着的那些男人。聊仍住在她心里的那个小女孩。 聊吻技。聊床技。聊口技。聊她和你未来的生活。聊你们想去的城市。 聊窗帘的颜色。聊瓷砖的花纹。聊奶粉的牌子。聊车子的类型。聊陌生电话里的那个TA。聊聊是否还有必要走下去。聊怎么分财产。聊不能忍受的彼此的缺点。聊到父母亲戚朋友全体出动劝你们。…… 聊给幼儿园老师包多少红包。聊孩子升学应该学什么特长。聊哪家中学更好。聊儿子的未来和女儿的暗恋对象。聊昨天做咸了的排骨汤和跑步时扭伤的脚踝。聊家里新买的音响。 直到某天，儿子回到家，对你们说，我喜欢一个姑娘，我该跟她聊什么呢？ 你们相视一笑，数不尽的默契。你说：这个，不如跟她聊聊她昨天新买的裙子吧","categories":[{"name":"life","slug":"life","permalink":"http://yoursite.com/categories/life/"}],"tags":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/tags/Life/"},{"name":"love","slug":"love","permalink":"http://yoursite.com/tags/love/"}]},{"title":"第三次积分赛总结","slug":"第三次积分赛总结","date":"2018-04-09T06:51:12.000Z","updated":"2018-04-09T16:25:00.921Z","comments":true,"path":"2018/04/09/第三次积分赛总结/","link":"","permalink":"http://yoursite.com/2018/04/09/第三次积分赛总结/","excerpt":"","text":"C题等精度测频1.等精度测频法原理图如下： 测量开始，首先发出一个清零信号CLR，使2个32 b的计数器和D触发器置0，然后再发出允许测频命令，即使预置门控信号GATE为高电平，这时D触发器要一直等到被测信号的上升沿通过时，Q端才被置1，即使BZ_ENA和DC_ENA同时为1，将启动计算器BZ_Counter和DC_Counter，系统进入计算允许周期。这时，计数器BZ_Counter和DC_Counter分别对被测信号和标准频率信号同时计数。当Tc秒过后，预置门控信号被单片机置为低电平，但此时2个32 b的计数器仍然没有停止计数，一直等到随后而至的被测信号的上升沿到来时，才通过D触发器将这2个计算器同时关闭。由图2所示的测频时序图可见，GATE的宽度和发生的时间都不会影响计数使能信号允许计数的周期总是恰好等于待测信号XCLK的完整周期，这正是确保XCLK在任何频率条件下都能保持恒定测量精度的关键。因为，此时GATE的宽度Tc改变以及随机的出现时间造成的误差最多只有基准时钟BCLK信号的一个时钟周期，由于BCLK的信号是由高稳定度的100 MHz晶体振荡器发出的，所以任何时刻的绝对测量误差只有1/108 s，这也是系统产生主要的误差。 2.系统方案本次采用了FPGA测量频率，占空比，时间间隔的方法，单片机与串口屏则作为数据接收与显示方案。本题原理清晰，实现的算法多样。 单片机与FPGA采用串口通信，波特率为115200.通信方案为：FPGA不停地将每次测量的结果发送给MCU。数据帧头为0X0A，数据帧尾为0X0D。每次发送数据长度为16字节，包含4个32位数据。数据处理格式为： 频率=数据1/数据0 占空比=数据2/数据0 相位差=数据33.遇到的问题 1.串口接收数据错误 MCU采用串口中断触发不使用FIFO的方式接收数据，每接收一字节的数据就进入中断。结果显示，接收的数据常常在数据头或者数据尾发生错误。 原因分析：在串口接收过程中，由于中断中存在判断数据帧头语句，因此在数据帧头后紧接着的数据头易丢书。和中断进入也有关系 解决方案：放弃使用中断接收数据，改为在while(1)大循环中使用while循环，判断串口是否为空的方式接收数据 2.使用TM4与串口屏通信时，没有现象 按照UART的常规配置方法配置好后，串口屏未接收到数据，插入电脑测试后也无现象 原因分析：TM4对某些引脚采用了锁引脚的操作，使得某些引脚如果不解锁则无法使用 解决方案：换用串口5 3.数据处理出错 在对数据处理时，经过乘方运算后，输出数据错误 错误分析：C语言实际上是不提供乘方操作的 解决方案：调用math.h中的pow函数实现乘方操作 4.最终结果 频率测量范围：1Hz-40M,平均误差不高于1% 占空比测量误差较大，最大有5%的误差 时间间隔测量准确，平均误差为1% 5.需要改进 增加高频信号测量 减小误差，尤其是占空比测量 B题锁定放大器1.锁定放大器原理两个信号相乘，因为在同频同相的情况下才会生成一个带直流偏量的信号。通过一个低通滤波器滤除交流成分，就会得到一个与原始输入信号成正比的直流信号，通过测量这个直流信号，就可以得到输入信号的值因为锁定放大器抗干扰能力强，所以通常被用来测量微弱信号 2.系统方案整个系统以相敏检波器为核心，输入信号进来后，首先经过一个交流放大器放大微弱的信号，之后通过一个中心频率为1kHz的带通滤波器来滤除其他频率的噪声。同时，输入信号再分出一路通过一个迟滞比较器进行触发整形，再经过一个由FPGA实现的数字移向器，之后通过一个用作方波驱动的放大器将方波信号放大。两路信号加到乘法器中，由于两信号同频同相，所以会产生一个带直流偏置的信号。将相敏检波器输出的信号通过一个低通滤波器滤除交流成分，得到直流信号，最后使用TM4内置12位AD测量直流信号，并发送到串口屏进行显示。该系统中交流放大器分两级，后级为固定增益的放大器，前级为增益可控的程控放大器，其增益范围为1，10，100，1000.系统框图如下： 3.遇到的问题1.测量信号时出现幅值缓慢下降 使用AD测量幅值时，幅度值难以稳定，呈缓慢下降趋势。 原因分析：带通滤波器带增益，造成经过带通滤波器的信号出现缓慢相移，使原先对齐相位的信号不再，使得幅度下滑 解决方案：改为使用不带增益的带通滤波器 2.测量信号时出现幅值来回跳动的情况 使用AD测量时，经过拟合后的数据在不同测试时呈现不同的结果 原因分析：每次锁定放大器产生的直流偏量不尽相同，使得拟合失去意义 解决方案：无 3.测试方案不对 采用更改衰减器的方案来分段测量100uV-1mV和1mV-10mV的信号。在测试的过程中，老师则认为作品应当是完备的，不被更改的，在测试过程中修改电路是错误的做法 4.增益控制无法切换 本次放大采用程控的方案，通过判读AD采样的阈值来切换放大的挡位。在实际测试中出现挡位停留在100档出不来的现象。 原因分析：经查找，发现100倍放大时电路出现削顶现象，无论怎么样改变输入，都无法改变输出电压，且输出电压始终无法达到阈值 解决方案：调低阈值 5.带通滤波器出现50Hz漂移6.加法器没能实现1：1叠加，从而无法在10倍噪声幅度下提取信号4.最终结果 能较准确的测量信号，但整个电路需要一定的调整时间。 无法换挡，导致不停按Reset 10倍噪声无法测量信号 5.需要改进增加整个电路输出的稳定性","categories":[{"name":"work","slug":"work","permalink":"http://yoursite.com/categories/work/"}],"tags":[{"name":"work","slug":"work","permalink":"http://yoursite.com/tags/work/"},{"name":"think","slug":"think","permalink":"http://yoursite.com/tags/think/"}]},{"title":"4月9日随想","slug":"4月9日随想","date":"2018-04-09T05:46:56.000Z","updated":"2018-04-09T05:53:35.532Z","comments":true,"path":"2018/04/09/4月9日随想/","link":"","permalink":"http://yoursite.com/2018/04/09/4月9日随想/","excerpt":"","text":"4.9日随想 今天的测评结束后回寝室睡觉回血，闭眼之前突然想到了高三的那段时光。那时压力很大，学业很忙。但几乎每天晚上一下晚自习我就会冲出去抢占校园电话去和她短暂的交流。每次都掐着表不能打太久，否则回不了寝。每次像打报告一样陈述自己日复一日的高三生活。每次都和她互相激励。想到这，突然觉得心里暖暖的。 都说穷开心，苦作乐。在难过的岁月里这样简朴的温暖和开心，在后来突然的回忆起时，心里的暖流总是容易化作泪水积蓄在眼角。 人喜欢回忆的时候往往是他不顺的时候，而我大概是因为这两天肝的太厉害，压力有点大了。幸好还有她，今晚给我打电话时让我仿佛又回到从前，我向她倾诉，她给我打气。一切从来没有变过。 恋爱最怕听到一句话：你变了。我是不是变了？我觉得是，她也觉得是。女孩子喜欢谈感觉。从前我读高中时，也像现在异地一样，很难见面。但她能在每晚的电话里感到温暖和快乐，虽然很忙很苦。现在异地了，见面的间隔从周变成了月。我不会在每晚掐着表给她打电话了，因为手机随身携带太方便了。但打电话时却找不到那时的感觉了。其实道理很简单，仪式感。从前打电话时，我和她约定好今晚10点半，然后我准时在晚上打给她。期待了一天的事情得到了兑现，这就像一个Buff加成。人生最大的乐趣不就是期望得到兑现吗？ 有时会感觉异地太难了，从和人谈恋爱，变成了和手机谈恋爱。从语音交流变成文字交流，还没有肢体语言的交流，这能不苦吗？每对能成的异地恋大概都是十世相遇而未修成正果积来的姻缘。 我要睡觉回血了，溜了溜了。","categories":[{"name":"think","slug":"think","permalink":"http://yoursite.com/categories/think/"}],"tags":[{"name":"think","slug":"think","permalink":"http://yoursite.com/tags/think/"},{"name":"Life","slug":"Life","permalink":"http://yoursite.com/tags/Life/"},{"name":"love","slug":"love","permalink":"http://yoursite.com/tags/love/"}]},{"title":"4.1日314大事一览","slug":"4-1日314大事一览","date":"2018-04-01T14:08:21.000Z","updated":"2018-04-03T02:37:01.292Z","comments":true,"path":"2018/04/01/4-1日314大事一览/","link":"","permalink":"http://yoursite.com/2018/04/01/4-1日314大事一览/","excerpt":"","text":"4.1日314大事一览曾主席获“荣誉社长”奖日前，南邮第22届社团“荣誉社长奖”公布，经过PU一万多名同学的投票，通院科协主席曾锦海以百分之50.1的压倒性优势毫无悬念的获得该奖。在颁奖仪式上，校长杨震为曾哥颁发了奖项，对他表示热烈祝贺，并签署校长嘉奖令以奖励曾主席这一年来对科协发展做出的巨大努力。在发布获奖感言时，曾主席声泪俱下，抒发了自己对科协的无限深情。真是闻者落泪。感言发表到最后，曾主席用哽咽的声音的声音说道：“感谢杨校长，让我一年的考研复习终于付诸东流。” 顾yl当选状元第59届NBA选秀正如火如荼的进行，南京邮电大学推选的选手顾yl正坐在选秀大厅等待命运的召唤。选秀开始，NBA总裁肖华徐徐走到台前，他打开手里的信封，大声的念出“来自加利福尼亚州的金州勇士队选中了来自中国江苏南京邮电大学的顾yl”。全场沸腾了，这是继姚明之后，中国的又一个NBA选秀状元！同时是NBA第一个华裔后卫状元！他是中国的骄傲，亚洲的骄傲，世界的骄傲！顾yl与肖华亲切握手，并小声说道“Q币已到账，批准入dang！” 二狗再度离婚科协4月1日讯，著名影星马二狗于昨日发表声明，称自己与自己的第41任妻子已登记离婚，双方和平分手。在记者发布会上，记者问道：“马先生，我们都知道你追求者无数，而您也乐衷于与女性交往。请问您保持魅力的秘诀是什么？”二狗回答道：“魅力是每个人与生俱来的，我从来没有刻意去为了吸引他人而做什么，我有时会觉得很烦恼，我即使站在那里一动不动，也总是会有异性上前与我搭讪。而我出于礼貌，也总是会与她们热情攀谈起来，我之前的41任妻子都是这样与我相识的。但如果非要找一个原因的话，大概就是我是一名ACM从业者，ACM在女性眼中就是身份与能力的象征，代表着能力，权力，财富，智慧。真正吸引女性的永远是积极向上的品格！”语毕，会上响起雷鸣般的掌声。 小茜首度升空中国第一架完全由个人制造的航空载人火箭与3月31日晚在314发射中心成功发射。总设计师，总制造师，总材料师，总后勤部长，总装配师，总指挥小茜乘坐火箭“314一号”成功进入太空。在顺利进入轨道后，小茜与地面控制中心314进行了视频通话。双方就近日热点话题交换了意见。小茜指出：坚持“一个火箭，两个支架”的火箭指导思想要坚持一百年不动摇。要坚持把以群力制造火箭的落后思想转移以全力建设个人火箭中心上来。要坚持走基本材料路线，不够的材料去捡，去偷，去抢。一定要始终牢记火箭就是生命线，为把火箭建设成一流装备而不懈努力，早日实现“火箭梦”！双方就其他话题也交换了意见。 小亿宣布破产中国首富王兆亿近日在314日报上发表声明，宣布自己财产大幅缩水，已经破产。一时间，股市震动，股价大跌，股民哀鸿遍野。楼盘震动，房价暴涨，大批购房者蜂拥而至。南京一楼盘开盘，买房者竟挤垮了售楼房，造成0死314伤的严重踩踏事故。阿里粑粑总裁马风联和藤迅总裁马花藤以及京西董事长刘弱西上门恳求王兆亿收回破产声明，以避免经济垮塌，多年建设毁于一旦。在三人的再三恳求下，王兆亿于次日发表声明：本人王兆亿，是山西兆亿煤矿董事长。目前流动资产314亿美金，固定资产314亿美金，相比于破产之前缩水百分之99.但考虑到经济建设，本人收回破产声明，此致，敬礼！ 最后的最后，祝大家愚人节快乐，天天开心！","categories":[{"name":"life","slug":"life","permalink":"http://yoursite.com/categories/life/"}],"tags":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/tags/Life/"},{"name":"funny","slug":"funny","permalink":"http://yoursite.com/tags/funny/"}]},{"title":"hexo主题配置","slug":"hexo主题配置","date":"2018-03-28T12:13:56.000Z","updated":"2018-03-28T18:07:42.913Z","comments":true,"path":"2018/03/28/hexo主题配置/","link":"","permalink":"http://yoursite.com/2018/03/28/hexo主题配置/","excerpt":"","text":"1.hexo+Github主题配置参见教程 2.个性化个人页面git clone 主题后效果如图：另附该主题的说明ps:下载好主题后记得把主题文件夹下的config文件去掉后面的example 默认为德语，修改为英文的需要将hexo文件夹根目录（不是主题目录）的config文件修改 12345678# Sitetitle: Hexosubtitle:description:keywords:author: John Doelanguage: entimezone: 改为中文即为：1language: zh-CN 接下来就是配置config文件: 1.首先添加menu1234menu: Home: / Categories: About: /about/index.html 如果想增加导航页，可以增加条目：1234567menu: Home: / Categories: One: Two: ... About: /about/index.html 2.接下来修改个人Logo：12345customize: logo: width: 165 height: 60 url: images/logo-header.png 宽和高都是以像素为单位的，只有数字，没有单位。 图片是存放在themes\\temp\\source\\css\\images中，只需要将自己想要的图存在该文件夹下，并修改config文件 1url: images/example.png 接下来的配置，推荐默认，颜色可按个人喜好修改： 1234theme_color: &apos;#006bde&apos;highlight: androidstudiosidebar: left # sidebar position, options: left, rightthumbnail: true # enable posts thumbnail, options: true, false 3.添加网站的缩略图，步骤如下： 制作一张32*32的ico缩略图，推荐比特虫 将制作好的图片放入之前的图片地址themes\\temp\\source\\css\\images 修改congfig favicon: css/images/favicon.ico 4.添加社交链接：123456twitter: /facebook: /google-plus: /github: https://github.com/ppoffice/hexo-theme-huemanweibo: /rss: / 可根据自己需要添加 但问题是，这些提供的链接大都是国外的网站，没有梯子的童鞋非常难办。但改为国内的一些网站链接后，会出现无图标的情况 这是因为该主题图标使用了fontawesome,而在fontawesome中并没有提供国内一些网站的图标 可以寻找与你的社交网站图标类似的图标作为代替 在\\source\\libs\\font-awesome\\css中有两个文件font-awesome.css和font-awesome.min.css 用文本编译器打开后是下面的画风： 12345678.fa-commenting:before &#123; content: &quot;\\f27a&quot;;&#125;.fa-commenting-o:before &#123; content: &quot;\\f27b&quot;;&#125;.fa-houzz:before &#123; content: &quot;\\f27c&quot;; 其中，fa后面的就是图标的名称，我们可以在这里找到图标对应的名称 之后修改对应的css文件和min.css文件 12345678.fa-commenting:before &#123; content: &quot;\\f27a&quot;;&#125;.fa-commenting-o:before &#123; content: &quot;\\f27b&quot;;&#125;.fa-example:before &#123; content: &quot;\\f27c&quot;; 修改后保存就可以了 5.配置搜索栏在git中运行 1hexo-generator-json-content 评论我没配置 分享推荐选择jiathis 链接自行添加就好 最后配置完所有项目，在git中输入 1npm install hexo-deployer-git --save 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 好啦，以上就是本次教程。个性化主题是一个看起来比较麻烦的过程，但操作完成后是非常有成就感的","categories":[{"name":"work","slug":"work","permalink":"http://yoursite.com/categories/work/"}],"tags":[{"name":"work","slug":"work","permalink":"http://yoursite.com/tags/work/"},{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"}]},{"title":"Hello","slug":"Hello","date":"2018-03-27T11:02:34.000Z","updated":"2018-03-27T11:50:39.942Z","comments":true,"path":"2018/03/27/Hello/","link":"","permalink":"http://yoursite.com/2018/03/27/Hello/","excerpt":"","text":"Welcome to MyBlog! This is my first post. And then I will update my articles into the web. Welcome to view it! If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"life","slug":"life","permalink":"http://yoursite.com/categories/life/"}],"tags":[{"name":"Life","slug":"Life","permalink":"http://yoursite.com/tags/Life/"}]}]}